{
    "project": {
        "name": "Zero UI Doc",
        "url": "https://github.com/silentbalanceyh/vertx-ui.git",
        "description": "Zero UI前端文档工具",
        "version": "0.1.0"
    },
    "files": {
        "src/app/control/ExamplePanel/UI.Markdown.js": {
            "name": "src/app/control/ExamplePanel/UI.Markdown.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/app/function/shared/Fn.UI.js": {
            "name": "src/app/function/shared/Fn.UI.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/economy/_internal/Ix.Fn.Mock.js": {
            "name": "src/economy/_internal/Ix.Fn.Mock.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/economy/_internal/index.js": {
            "name": "src/economy/_internal/index.js",
            "modules": {},
            "classes": {
                "_Internal": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/economy/debug/MonitorTool/UI.Tool.js": {
            "name": "src/economy/debug/MonitorTool/UI.Tool.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/economy/list/ComplexList/Op.Action.js": {
            "name": "src/economy/list/ComplexList/Op.Action.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/economy/list/ComplexList/Op.Bar.js": {
            "name": "src/economy/list/ComplexList/Op.Bar.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/economy/list/ComplexList/Op.Mock.js": {
            "name": "src/economy/list/ComplexList/Op.Mock.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/economy/list/ComplexList/UI.Render.js": {
            "name": "src/economy/list/ComplexList/UI.Render.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/economy/list/DialogList/UI.js": {
            "name": "src/economy/list/DialogList/UI.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/economy/list/TabList/Op.Action.js": {
            "name": "src/economy/list/TabList/Op.Action.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/economy/list/TabList/Op.Bar.js": {
            "name": "src/economy/list/TabList/Op.Bar.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/economy/list/TabList/UI.Render.js": {
            "name": "src/economy/list/TabList/UI.Render.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/economy/page/HelpCard/UI.js": {
            "name": "src/economy/page/HelpCard/UI.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/economy/page/PageCard/UI.js": {
            "name": "src/economy/page/PageCard/UI.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/economy/page/TitleCard/UI.js": {
            "name": "src/economy/page/TitleCard/UI.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/environment/zero.js": {
            "name": "src/environment/zero.js",
            "modules": {},
            "classes": {
                "zero": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/_backup/Ux.Ant.js": {
            "name": "src/ux/_backup/Ux.Ant.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/ux/ai/AI.Action.Smart.js": {
            "name": "src/ux/ai/AI.Action.Smart.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/ux/ai/AI.Column.Cell.js": {
            "name": "src/ux/ai/AI.Column.Cell.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/ux/ai/AI.Column.Op.js": {
            "name": "src/ux/ai/AI.Column.Op.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/ux/ai/AI.Expr.String.js": {
            "name": "src/ux/ai/AI.Expr.String.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/ux/ai/AI.Layout.Calculator.js": {
            "name": "src/ux/ai/AI.Layout.Calculator.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/ux/ai/AI.Layout.js": {
            "name": "src/ux/ai/AI.Layout.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/ux/ai/AI.Link.js": {
            "name": "src/ux/ai/AI.Link.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/ux/ai/AI.RxAnt.Datum.js": {
            "name": "src/ux/ai/AI.RxAnt.Datum.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/ux/fun/Ux.Param.js": {
            "name": "src/ux/fun/Ux.Param.js",
            "modules": {},
            "classes": {
                "Param": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/fun/Ux.Rdx.js": {
            "name": "src/ux/fun/Ux.Rdx.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/ux/fun/Ux.Redux.js": {
            "name": "src/ux/fun/Ux.Redux.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/ux/jsx/Ux.Jsx.Default.js": {
            "name": "src/ux/jsx/Ux.Jsx.Default.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/ux/jsx/Ux.Jsx.Op.js": {
            "name": "src/ux/jsx/Ux.Jsx.Op.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/ux/jsx/Ux.Jsx.Single.js": {
            "name": "src/ux/jsx/Ux.Jsx.Single.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/ux/jsx/Ux.Jsx.View.Fn.js": {
            "name": "src/ux/jsx/Ux.Jsx.View.Fn.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/ux/monitor/Mt.Logger.js": {
            "name": "src/ux/monitor/Mt.Logger.js",
            "modules": {},
            "classes": {
                "Log": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/monitor/Mt.Writer.js": {
            "name": "src/ux/monitor/Mt.Writer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/ux/op/Ux.Action.js": {
            "name": "src/ux/op/Ux.Action.js",
            "modules": {},
            "classes": {
                "Action": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/op/Ux.Connect.js": {
            "name": "src/ux/op/Ux.Connect.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/ux/op/Ux.On.js": {
            "name": "src/ux/op/Ux.On.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/ux/op/Ux.Pipe.js": {
            "name": "src/ux/op/Ux.Pipe.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/ux/prop/Ux.Attribute.js": {
            "name": "src/ux/prop/Ux.Attribute.js",
            "modules": {},
            "classes": {
                "Attribute": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/prop/Ux.Field.js": {
            "name": "src/ux/prop/Ux.Field.js",
            "modules": {},
            "classes": {
                "Field": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/prop/Ux.Form.js": {
            "name": "src/ux/prop/Ux.Form.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/ux/prop/Ux.Hoc.js": {
            "name": "src/ux/prop/Ux.Hoc.js",
            "modules": {},
            "classes": {
                "Hoc": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/prop/Ux.Item.js": {
            "name": "src/ux/prop/Ux.Item.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/ux/prop/Ux.Prop.js": {
            "name": "src/ux/prop/Ux.Prop.js",
            "modules": {},
            "classes": {
                "Prop": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/prop/Ux.State.js": {
            "name": "src/ux/prop/Ux.State.js",
            "modules": {},
            "classes": {
                "State": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/prop/Ux.Validator.js": {
            "name": "src/ux/prop/Ux.Validator.js",
            "modules": {},
            "classes": {
                "Validator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/rx/Rx.Transfer.js": {
            "name": "src/ux/rx/Rx.Transfer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/ux/system/Ux.Global.js": {
            "name": "src/ux/system/Ux.Global.js",
            "modules": {},
            "classes": {
                "Global": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/system/Ux.Store.js": {
            "name": "src/ux/system/Ux.Store.js",
            "modules": {},
            "classes": {
                "Store": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/terminal/Ux.Terminal.Verify.js": {
            "name": "src/ux/terminal/Ux.Terminal.Verify.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/ux/trigger/Ux.Depend.js": {
            "name": "src/ux/trigger/Ux.Depend.js",
            "modules": {},
            "classes": {
                "Depend": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/util/Ux.Encrypt.js": {
            "name": "src/ux/util/Ux.Encrypt.js",
            "modules": {},
            "classes": {
                "Encrypt": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/util/Ux.Expr.js": {
            "name": "src/ux/util/Ux.Expr.js",
            "modules": {},
            "classes": {
                "Expr": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/util/Ux.Format.js": {
            "name": "src/ux/util/Ux.Format.js",
            "modules": {},
            "classes": {
                "Format": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/util/Ux.Html.js": {
            "name": "src/ux/util/Ux.Html.js",
            "modules": {},
            "classes": {
                "Html": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/util/Ux.Icon.js": {
            "name": "src/ux/util/Ux.Icon.js",
            "modules": {},
            "classes": {
                "Icon": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/util/Ux.Random.js": {
            "name": "src/ux/util/Ux.Random.js",
            "modules": {},
            "classes": {
                "Random": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/util/Ux.Sign.js": {
            "name": "src/ux/util/Ux.Sign.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/ux/util/Ux.Sorter.js": {
            "name": "src/ux/util/Ux.Sorter.js",
            "modules": {},
            "classes": {
                "Sorter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/value/Ux.Value.Ct.js": {
            "name": "src/ux/value/Ux.Value.Ct.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/ux/value/Ux.Value.Date.js": {
            "name": "src/ux/value/Ux.Value.Date.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/ux/value/Ux.Value.Event.js": {
            "name": "src/ux/value/Ux.Value.Event.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/ux/value/Ux.Value.Math.js": {
            "name": "src/ux/value/Ux.Value.Math.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.Ajax.Rx.js": {
            "name": "src/ux/Ux.Ajax.Rx.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.Ajax.js": {
            "name": "src/ux/Ux.Ajax.js",
            "modules": {},
            "classes": {
                "Ajax": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.Column.js": {
            "name": "src/ux/Ux.Column.js",
            "modules": {},
            "classes": {
                "Column": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.Debug.js": {
            "name": "src/ux/Ux.Debug.js",
            "modules": {
                "Ux": 1
            },
            "classes": {
                "Debug": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.Dialog.js": {
            "name": "src/ux/Ux.Dialog.js",
            "modules": {},
            "classes": {
                "Dialog": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.Env.js": {
            "name": "src/ux/Ux.Env.js",
            "modules": {},
            "classes": {
                "Env": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.Jsx.js": {
            "name": "src/ux/Ux.Jsx.js",
            "modules": {},
            "classes": {
                "Jsx": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.Normalize.js": {
            "name": "src/ux/Ux.Normalize.js",
            "modules": {},
            "classes": {
                "Normalize": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.Op.js": {
            "name": "src/ux/Ux.Op.js",
            "modules": {},
            "classes": {
                "Op": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.Type.js": {
            "name": "src/ux/Ux.Type.js",
            "modules": {},
            "classes": {
                "Type": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.Value.js": {
            "name": "src/ux/Ux.Value.js",
            "modules": {},
            "classes": {
                "Value": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.js": {
            "name": "src/ux/Ux.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Ux": {
            "name": "Ux",
            "submodules": {},
            "elements": {},
            "classes": {
                "_Internal": 1,
                "zero": 1,
                "Param": 1,
                "Log": 1,
                "Action": 1,
                "Attribute": 1,
                "Field": 1,
                "Hoc": 1,
                "Prop": 1,
                "State": 1,
                "Validator": 1,
                "Global": 1,
                "Store": 1,
                "Depend": 1,
                "Encrypt": 1,
                "Expr": 1,
                "Format": 1,
                "Html": 1,
                "Icon": 1,
                "Random": 1,
                "Sorter": 1,
                "Ajax": 1,
                "Column": 1,
                "Debug": 1,
                "Dialog": 1,
                "Env": 1,
                "Jsx": 1,
                "Normalize": 1,
                "Op": 1,
                "Type": 1,
                "Value": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/ux/Ux.Value.js",
            "line": 146,
            "description": "1. `ensure`工具类：Zero UI内部专用断言工具类\n2. `dg`工具类：开发人员调试常用工具类"
        }
    },
    "classes": {
        "_Internal": {
            "name": "_Internal",
            "shortname": "_Internal",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "file": "src/economy/_internal/index.js",
            "line": 1,
            "description": "zero注解的预处理功能，防止循环引用（主要用于不能导入Ux的组件）"
        },
        "zero": {
            "name": "zero",
            "shortname": "zero",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "file": "src/environment/zero.js",
            "line": 230,
            "description": "注解zero用于封装组件的高阶ES7语法"
        },
        "Param": {
            "name": "Param",
            "shortname": "Param",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "file": "src/ux/fun/Ux.Param.js",
            "line": 138,
            "description": "复杂参数解析器"
        },
        "Log": {
            "name": "Log",
            "shortname": "Log",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "file": "src/ux/monitor/Mt.Logger.js",
            "line": 335,
            "description": "日志专用类，支持不同组件的彩色日志"
        },
        "Action": {
            "name": "Action",
            "shortname": "Action",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "file": "src/ux/op/Ux.Action.js",
            "line": 67,
            "description": "通用Form操作相关方法"
        },
        "Attribute": {
            "name": "Attribute",
            "shortname": "Attribute",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "file": "src/ux/prop/Ux.Attribute.js",
            "line": 22,
            "description": "Jsx中的组件属性专用绑定"
        },
        "Field": {
            "name": "Field",
            "shortname": "Field",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "file": "src/ux/prop/Ux.Field.js",
            "line": 58,
            "description": "字段异步验证专用类"
        },
        "Hoc": {
            "name": "Hoc",
            "shortname": "Hoc",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "file": "src/ux/prop/Ux.Hoc.js",
            "line": 113,
            "description": "专用Hoc解释器"
        },
        "Prop": {
            "name": "Prop",
            "shortname": "Prop",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "file": "src/ux/prop/Ux.Prop.js",
            "line": 120,
            "description": "属性专用处理器"
        },
        "State": {
            "name": "State",
            "shortname": "State",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "file": "src/ux/prop/Ux.State.js",
            "line": 142,
            "description": "回写状态树专用方法"
        },
        "Validator": {
            "name": "Validator",
            "shortname": "Validator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "file": "src/ux/prop/Ux.Validator.js",
            "line": 194,
            "description": "Ant Design验证规则横切注入专用"
        },
        "Global": {
            "name": "Global",
            "shortname": "Global",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "file": "src/ux/system/Ux.Global.js",
            "line": 83,
            "description": "全局专用业务函数"
        },
        "Store": {
            "name": "Store",
            "shortname": "Store",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "file": "src/ux/system/Ux.Store.js",
            "line": 85,
            "description": "访问Session/Local的Storage专用"
        },
        "Depend": {
            "name": "Depend",
            "shortname": "Depend",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "file": "src/ux/trigger/Ux.Depend.js",
            "line": 38,
            "description": "用于处理关联字段专用的雷，一般处理带依赖的字段数据"
        },
        "Encrypt": {
            "name": "Encrypt",
            "shortname": "Encrypt",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "file": "src/ux/util/Ux.Encrypt.js",
            "line": 70,
            "description": "加密、编码、解码函数"
        },
        "Expr": {
            "name": "Expr",
            "shortname": "Expr",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "file": "src/ux/util/Ux.Expr.js",
            "line": 94,
            "description": "字符串格式化专用函数"
        },
        "Format": {
            "name": "Format",
            "shortname": "Format",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "file": "src/ux/util/Ux.Format.js",
            "line": 23,
            "description": "格式化专用函数"
        },
        "Html": {
            "name": "Html",
            "shortname": "Html",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "file": "src/ux/util/Ux.Html.js",
            "line": 50,
            "description": "原生Html元素连接类"
        },
        "Icon": {
            "name": "Icon",
            "shortname": "Icon",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "file": "src/ux/util/Ux.Icon.js",
            "line": 20,
            "description": "图标处理"
        },
        "Random": {
            "name": "Random",
            "shortname": "Random",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "file": "src/ux/util/Ux.Random.js",
            "line": 16,
            "description": "专用随机类"
        },
        "Sorter": {
            "name": "Sorter",
            "shortname": "Sorter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "file": "src/ux/util/Ux.Sorter.js",
            "line": 19,
            "description": "Table组件排序专用函数，对应列中的sorter"
        },
        "Ajax": {
            "name": "Ajax",
            "shortname": "Ajax",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "file": "src/ux/Ux.Ajax.js",
            "line": 282,
            "description": "远程Ajax访问专用API方法"
        },
        "Column": {
            "name": "Column",
            "shortname": "Column",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "file": "src/ux/Ux.Column.js",
            "line": 71,
            "description": "Ant Design中的Table专用系列方法，暂时只有PageList在调用这三个函数，\n注意这里的columns必须是`Array`类型用于注入到Table组件"
        },
        "Debug": {
            "name": "Debug",
            "shortname": "Debug",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "namespace": "",
            "file": "src/ux/Ux.Debug.js",
            "line": 101,
            "description": "1. `ensure`工具类：Zero UI内部专用断言工具类\n2. `dg`工具类：开发人员调试常用工具类"
        },
        "Dialog": {
            "name": "Dialog",
            "shortname": "Dialog",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "namespace": "",
            "file": "src/ux/Ux.Dialog.js",
            "line": 204,
            "description": "窗口专用雷用于处理弹出窗口的开与关的信息"
        },
        "Env": {
            "name": "Env",
            "shortname": "Env",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "namespace": "",
            "file": "src/ux/Ux.Env.js",
            "line": 66,
            "description": "环境变量专用类信息"
        },
        "Jsx": {
            "name": "Jsx",
            "shortname": "Jsx",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "namespace": "",
            "file": "src/ux/Ux.Jsx.js",
            "line": 143,
            "description": "字段专用输出函数"
        },
        "Normalize": {
            "name": "Normalize",
            "shortname": "Normalize",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "namespace": "",
            "file": "src/ux/Ux.Normalize.js",
            "line": 181,
            "description": "专用Form配置处理类，它的方法大部分都是内部使用"
        },
        "Op": {
            "name": "Op",
            "shortname": "Op",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "namespace": "",
            "file": "src/ux/Ux.Op.js",
            "line": 71,
            "description": "操作专用类"
        },
        "Type": {
            "name": "Type",
            "shortname": "Type",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "namespace": "",
            "file": "src/ux/Ux.Type.js",
            "line": 443,
            "description": "复杂数据结构计算"
        },
        "Value": {
            "name": "Value",
            "shortname": "Value",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "namespace": "",
            "file": "src/ux/Ux.Value.js",
            "line": 146,
            "description": "数值计算器"
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "src/app/control/ExamplePanel/UI.Markdown.js",
            "line": 62,
            "description": "Ux.D.stString(table.columns,\n\"source\", \"provider\", \"consumer\",\n\"name\", \"category\"",
            "class": "_Internal"
        },
        {
            "file": "src/app/function/shared/Fn.UI.js",
            "line": 96,
            "description": "统一函数",
            "params": [
                {
                    "name": "reference",
                    "description": ""
                },
                {
                    "name": "tree",
                    "description": ""
                },
                {
                    "name": "files",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "_Internal"
        },
        {
            "file": "src/economy/_internal/Ix.Fn.Mock.js",
            "line": 15,
            "description": "mock是组件内部state状态中开启mock专用\nmocker为组件内部的mocker初始化\n$mockData.mock为全局模拟数据的环境变量",
            "class": "_Internal"
        },
        {
            "file": "src/economy/_internal/Ix.Fn.Mock.js",
            "line": 38,
            "description": "Detail数据读取",
            "params": [
                {
                    "name": "reference",
                    "description": ""
                },
                {
                    "name": "id",
                    "description": ""
                }
            ],
            "class": "_Internal"
        },
        {
            "file": "src/economy/_internal/index.js",
            "line": 5,
            "description": "zero内部注解，防止循环引用专用",
            "itemtype": "method",
            "name": "_zero",
            "class": "_Internal"
        },
        {
            "file": "src/economy/debug/MonitorTool/UI.Tool.js",
            "line": 7,
            "description": "抽屉主入口，用于帮助Zero UI专用调试工具入口",
            "class": "zero"
        },
        {
            "file": "src/economy/list/ComplexList/Op.Action.js",
            "line": 54,
            "description": "二义性函数",
            "params": [
                {
                    "name": "reference",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": ""
                },
                {
                    "name": "id",
                    "description": ""
                }
            ],
            "class": "zero"
        },
        {
            "file": "src/economy/list/ComplexList/Op.Bar.js",
            "line": 127,
            "description": "添加只有一个，所以如果包含了添加的情况不处理key相关信息（即添加不计算)",
            "class": "zero"
        },
        {
            "file": "src/economy/list/ComplexList/Op.Bar.js",
            "line": 139,
            "description": "是否触发条件删除流程",
            "type": "{boolean}",
            "class": "zero"
        },
        {
            "file": "src/economy/list/ComplexList/Op.Mock.js",
            "line": 15,
            "description": "mock是组件内部state状态中开启mock专用\nmocker为组件内部的mocker初始化\n$mockData.mock为全局模拟数据的环境变量",
            "class": "zero"
        },
        {
            "file": "src/economy/list/ComplexList/Op.Mock.js",
            "line": 38,
            "description": "Detail数据读取",
            "params": [
                {
                    "name": "reference",
                    "description": ""
                },
                {
                    "name": "id",
                    "description": ""
                }
            ],
            "class": "zero"
        },
        {
            "file": "src/economy/list/ComplexList/UI.Render.js",
            "line": 22,
            "description": "解决多个Tab页状态不同步的问题\n1.只有Active的面板可以操作\n2.根据activeKey来执行界面切换，同时刷新子界面对应的$inited\n3.在关闭窗口的时候传入activeKey，需要关闭的是当前的窗口",
            "class": "zero"
        },
        {
            "file": "src/economy/list/DialogList/UI.js",
            "line": 59,
            "description": "计算初始化数据initData，",
            "class": "zero"
        },
        {
            "file": "src/economy/list/TabList/Op.Action.js",
            "line": 54,
            "description": "二义性函数",
            "params": [
                {
                    "name": "reference",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": ""
                },
                {
                    "name": "id",
                    "description": ""
                }
            ],
            "class": "zero"
        },
        {
            "file": "src/economy/list/TabList/Op.Bar.js",
            "line": 127,
            "description": "添加只有一个，所以如果包含了添加的情况不处理key相关信息（即添加不计算)",
            "class": "zero"
        },
        {
            "file": "src/economy/list/TabList/UI.Render.js",
            "line": 23,
            "description": "解决多个Tab页状态不同步的问题\n1.只有Active的面板可以操作\n2.根据activeKey来执行界面切换，同时刷新子界面对应的$inited\n3.在关闭窗口的时候传入activeKey，需要关闭的是当前的窗口",
            "class": "zero"
        },
        {
            "file": "src/economy/page/HelpCard/UI.js",
            "line": 10,
            "description": "基本要求：\nreference为父引用，和该组件绑定的资源文件必须包含：\n{\n     \"_topbar\":{\n         \"title\":\"标题文字\",\n         \"step\":{\n             \"active\":1,\n             \"items\":[\n             ]\n         }\n     }\n}",
            "class": "zero"
        },
        {
            "file": "src/economy/page/PageCard/UI.js",
            "line": 10,
            "description": "基本要求：\nreference为父引用，和该组件绑定的资源文件必须包含：\n{\n     \"_topbar\":{\n         \"title\":\"标题文字\",\n         \"current\":1\n     }\n}\ncurrent需要配合外置的$extra一起使用\n$key用于解析配置文件\n$extra用于设置额外的附加工具栏",
            "class": "zero"
        },
        {
            "file": "src/economy/page/TitleCard/UI.js",
            "line": 5,
            "description": "基本要求：\nreference为父引用，和该组件绑定的资源文件必须包含：\n{\n     \"_topbar\":{\n         \"title\":\"标题文字\",\n         \"current\":1\n     }\n}\ncurrent需要配合外置的$extra一起使用\n$key用于解析配置文件\n$extra用于设置额外的附加工具栏",
            "class": "zero"
        },
        {
            "file": "src/environment/zero.js",
            "line": 8,
            "description": "计算组件的全名，主要针对zero配置中的两个特殊键",
            "itemtype": "method",
            "name": "fnFullName",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "target",
                    "description": "需要封装的组件信息"
                },
                {
                    "name": "options",
                    "description": "配置基本信息"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "example": [
                "\n\n     ...\n     {\n         \"i18n.cab\":{}\n         \"i18n.name\":\"ComponentName\"\n     }"
            ],
            "class": "zero"
        },
        {
            "file": "src/environment/zero.js",
            "line": 34,
            "description": "针对组件执行Redux封装，封装Redux对应的connect专用方法",
            "itemtype": "method",
            "name": "fnConnect",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "target",
                    "description": "需要封装的组件信息"
                },
                {
                    "name": "options",
                    "description": "配置基本信息"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "example": [
                "\n\n     ...\n     {\n         connect:{\n             s2p:\"State -> Prop的Redux配置\",\n             d2p:\"Dispatch -> Prop的Redux配置\"\n         }\n     }"
            ],
            "class": "zero"
        },
        {
            "file": "src/environment/zero.js",
            "line": 65,
            "description": "执行Ant Design中的Form的封装，调用Form.create()方法",
            "itemtype": "method",
            "name": "fnForm",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "target",
                    "description": "需要封装的组件信息"
                },
                {
                    "name": "options",
                    "description": "配置基本信息"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "example": [
                "\n\n     ...\n     {\n         form:true\n     }"
            ],
            "class": "zero"
        },
        {
            "file": "src/environment/zero.js",
            "line": 85,
            "description": "配合fnForm执行的Form中的配置的检查，保证：\n* Hoc高阶配置中必须包含`_form`节点；\n* `$hoc`必须作为配置存在于state状态中；",
            "itemtype": "method",
            "name": "ensureForm",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "target",
                    "description": "需要封装的组件信息"
                },
                {
                    "name": "options",
                    "description": "配置基本信息"
                }
            ],
            "class": "zero"
        },
        {
            "file": "src/environment/zero.js",
            "line": 104,
            "description": "和资源文件绑定的专用封装高阶组件方法，生成内部的`$hoc`变量；\n* `$hoc`变量是一个`HocI18n`的数据类型\n* `$hoc`变量位于当前组件`reference.state`状态中，而不是属性中",
            "itemtype": "method",
            "name": "fnI18n",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "target",
                    "description": "需要封装的组件信息"
                },
                {
                    "name": "options",
                    "description": "配置基本信息"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "zero"
        },
        {
            "file": "src/environment/zero.js",
            "line": 123,
            "description": "是否打印当前组件的日志信息，并且使用传入的`options.logger`输出日志【Debug模式】",
            "itemtype": "method",
            "name": "fnLog",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "reference",
                    "description": "需要封装的组件引用"
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "example": [
                "\n\n     ...\n     {\n         logger: Log.component\n     }"
            ],
            "class": "zero"
        },
        {
            "file": "src/environment/zero.js",
            "line": 148,
            "description": "读取某个key下边的数据信息：\n* `key`的格式对应Tabular/Assist格式；\n* `key`读出来的数据必须是`DataObject/DataArray`类型；\n* `DataObject/DataArray`类型需要执行`is()`判断看是否夹在完成；",
            "itemtype": "method",
            "name": "getDatum",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "props",
                    "description": "当前组件的属性props"
                },
                {
                    "name": "key",
                    "description": "检查的key"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "zero"
        },
        {
            "file": "src/environment/zero.js",
            "line": 167,
            "description": "是否在当前组件中启用Loading遮罩效果，该效果会调用Loading组件",
            "itemtype": "method",
            "name": "fnRender",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "props",
                    "description": "当前组件的属性props"
                },
                {
                    "name": "options",
                    "description": "基本配置信息"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "example": [
                "\n\n     ...\n     {\n         loading:[\n             \"pay.item\",\n             \"border\"\n         ]\n     }"
            ],
            "class": "zero"
        },
        {
            "file": "src/environment/zero.js",
            "line": 207,
            "description": "是否绑定操作信息，该操作信息会生成绑定数据，注入到`state`状态中",
            "itemtype": "method",
            "name": "fnOp",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "options",
                    "description": "基本配置信息"
                }
            ],
            "example": [
                "\n\n     ...\n     {\n         op:{\n             \"select\":Op.fnSelect\n         }\n     }"
            ],
            "class": "zero"
        },
        {
            "file": "src/environment/zero.js",
            "line": 235,
            "description": "zero注解过后执行Hoc高阶封装操作",
            "itemtype": "method",
            "name": "ZeroComponent",
            "class": "zero"
        },
        {
            "file": "src/ux/_backup/Ux.Ant.js",
            "line": 206,
            "description": "根据不同用户的角色值读取不同的UI",
            "itemtype": "method",
            "name": "uiLoader",
            "params": [
                {
                    "name": "props",
                    "description": ""
                },
                {
                    "name": "roles",
                    "description": ""
                },
                {
                    "name": "roleCode",
                    "description": ""
                }
            ],
            "class": "Param"
        },
        {
            "file": "src/ux/_backup/Ux.Ant.js",
            "line": 222,
            "description": "根据传入的grid渲染Col/Row专用方法",
            "itemtype": "method",
            "name": "uiGrid",
            "params": [
                {
                    "name": "grid",
                    "description": ""
                },
                {
                    "name": "jsx",
                    "description": ""
                }
            ],
            "class": "Param"
        },
        {
            "file": "src/ux/_backup/Ux.Ant.js",
            "line": 239,
            "description": "纯的Loading信息",
            "params": [
                {
                    "name": "text",
                    "description": ""
                }
            ],
            "class": "Param"
        },
        {
            "file": "src/ux/_backup/Ux.Ant.js",
            "line": 250,
            "description": "根据传入的grid渲染Col/Row专用方法",
            "itemtype": "method",
            "name": "uiIfElse",
            "params": [
                {
                    "name": "condition",
                    "description": "判断条件"
                },
                {
                    "name": "yesJsx",
                    "description": "condition = true时执行"
                },
                {
                    "name": "noJsx",
                    "description": "condition = false时执行"
                }
            ],
            "class": "Param"
        },
        {
            "file": "src/ux/ai/AI.Action.Smart.js",
            "line": 10,
            "description": "计算当前提交的模式",
            "params": [
                {
                    "name": "reference",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Param"
        },
        {
            "file": "src/ux/ai/AI.Action.Smart.js",
            "line": 53,
            "params": [
                {
                    "name": "metadata",
                    "description": "默认判断信息"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "access": "private",
            "tagname": "",
            "class": "Param"
        },
        {
            "file": "src/ux/ai/AI.Action.Smart.js",
            "line": 74,
            "description": "Normalize规范化数据信息（包括基于子列表的数据处理）",
            "params": [
                {
                    "name": "data",
                    "description": "原始表单提交数据信息"
                },
                {
                    "name": "reference",
                    "description": "React组件引用"
                },
                {
                    "name": "mode",
                    "description": "计算的mode"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Param"
        },
        {
            "file": "src/ux/ai/AI.Action.Smart.js",
            "line": 105,
            "description": "特殊的二阶函数，用于生成标准的 (event) => {\n    （函数逻辑）\n}",
            "params": [
                {
                    "name": "reference",
                    "description": "React引用信息"
                },
                {
                    "name": "fnSuccess",
                    "description": "回调专用的成功过后的函数"
                },
                {
                    "name": "fnFailure",
                    "description": "失败的回调函数相关信息"
                },
                {
                    "name": "metadata",
                    "description": "配置相关信息\n",
                    "type": "!~YUIDOC_LINE~!    fnValidate：验证专用的函数（后期验证验证）,!~YUIDOC_LINE~!    promise：true / false!~YUIDOC_LINE~!         true：「可切换值」表示当前所有的函数都必须返回promise；!~YUIDOC_LINE~!         false：「默认值」则表示当前所有的函数都是直接函数，不会返回promise；!~YUIDOC_LINE~!"
                }
            ],
            "return": {
                "description": "",
                "type": "Function(*): (*|*|void)"
            },
            "class": "Param"
        },
        {
            "file": "src/ux/ai/AI.Action.Smart.js",
            "line": 122,
            "description": "双参数格局\n1.不论哪种都调用过 event.preventDefault 函数；\n2.模式1：已经经历过Ant Design的提交流程\n     这种模式不可注入认证函数：fnValidate失效；\n     —— ambiguity 表示提交过后的表单值\n3.模式2：未经历过Ant Design的提交流程\n     这种模式可以注入认证函数：fnValidate失效；\n     —— ambiguity 表示原始Button中的 event 参数「调用过event.preventDefault()」\n     —— form 表单Ant Design中的form引用",
            "params": [
                {
                    "name": "ambiguity",
                    "description": ""
                }
            ],
            "class": "Param"
        },
        {
            "file": "src/ux/ai/AI.Action.Smart.js",
            "line": 135,
            "description": "提取模式信息：\n1. 双添加模式：主记录Add、子列表Add\n2. 添加编辑模式：主记录Add、子列表Edit\n3. 编辑添加模式：主记录Edit、子列表Add\n4. 双编辑模式：主记录Edit、子列表Edit",
            "class": "Param"
        },
        {
            "file": "src/ux/ai/AI.Action.Smart.js",
            "line": 143,
            "description": "验证函数处理",
            "type": "{*}",
            "class": "Param"
        },
        {
            "file": "src/ux/ai/AI.Action.Smart.js",
            "line": 148,
            "description": "如果包含第二参，则直接调用form相关信息",
            "class": "Param"
        },
        {
            "file": "src/ux/ai/AI.Action.Smart.js",
            "line": 169,
            "description": "由于fnMock需要修改传入引用，为有副作用的函数\n所以直接从params拷贝数据，返回Mock后的数据信息",
            "class": "Param"
        },
        {
            "file": "src/ux/ai/AI.Action.Smart.js",
            "line": 189,
            "description": "第一参为验证之前的错误信息\n没有第二参",
            "class": "Param"
        },
        {
            "file": "src/ux/ai/AI.Action.Smart.js",
            "line": 219,
            "description": "连接相关数据信息，数据结构：\n{\n    majorKey：主记录key\n    1. 添加模式来自$addKey\n    2. 编辑模式来自$parent.key\n    data：子记录数据\n}",
            "class": "Param"
        },
        {
            "file": "src/ux/ai/AI.Column.Cell.js",
            "line": 14,
            "description": "【高阶函数：二阶】列render方法处理器，用于处理双值\n* 配置键：LOGICAL\n* true/false对应不同的双值，以及不同值呈现值\n* 附加配置项中包含$mapping用于描述双值配置",
            "itemtype": "method",
            "name": "aiCellLogical",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "config",
                    "description": "单列配置数据",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Function(*): *"
            },
            "example": [
                "\n\n     ...\n     {\n         \"title\": \"房包早\",\n         \"dataIndex\": \"brekker\",\n         \"$render\": \"LOGICAL\",\n         \"$mapping\": {\n             \"true\": \"是\",\n             \"false\": \"否\"\n         }\n     }"
            ],
            "class": "Param"
        },
        {
            "file": "src/ux/ai/AI.Column.Cell.js",
            "line": 44,
            "description": "【高阶函数：二阶】列render方法处理器，用于处理带百分号（%）的字符串格式化\n* 配置值：PERCENT",
            "itemtype": "method",
            "name": "aiCellPercent",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "config",
                    "description": "单列配置数据",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Function(*=): *"
            },
            "class": "Param"
        },
        {
            "file": "src/ux/ai/AI.Column.Cell.js",
            "line": 58,
            "description": "【高阶函数：二阶】列render方法处理器，用于处理时间格式化\n* 配置值：DATE\n* 附加配置中包含$format用于描述moment的格式Pattern",
            "itemtype": "method",
            "name": "aiCellDate",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "config",
                    "description": "单列配置数据",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Function(*=): *"
            },
            "example": [
                "\n\n     ...\n     {\n         \"title\": \"抵达日期\",\n         \"dataIndex\": \"arriveTime\",\n         \"$render\": \"DATE\",\n         \"$format\": \"YYYY年MM月DD日 HH:mm:ss\"\n     }"
            ],
            "class": "Param"
        },
        {
            "file": "src/ux/ai/AI.Column.Cell.js",
            "line": 85,
            "description": "【高阶函数：二阶】列render方法处理器，用于处理货币格式化\n* 配置值：CURRENCY\n* 附加配置中包含$flag用于描述货币符号，默认为￥",
            "itemtype": "method",
            "name": "aiCellCurrency",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "config",
                    "description": "单列配置数据",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Function(*=): *"
            },
            "example": [
                "\n\n     ...\n     {\n         \"title\": \"单价\",\n         \"dataIndex\": \"unitPrice\",\n         \"$render\": \"CURRENCY\"\n     },"
            ],
            "class": "Param"
        },
        {
            "file": "src/ux/ai/AI.Column.Cell.js",
            "line": 107,
            "description": "【高阶函数：二阶】列render方法处理函数，用于处理表达式格式化\n* 配置项：EXPRESSION\n* 附加配置$expr用于描述表达式，表达式中的占位符使用`:value`的格式",
            "itemtype": "method",
            "name": "aiCellExpression",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "config",
                    "description": "单列配置数据",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Function(*=): *"
            },
            "example": [
                "\n\n     ...\n     {\n         \"title\": \"入住天数\",\n         \"dataIndex\": \"insideDays\",\n         \"$render\": \"EXPRESSION\",\n         \"$expr\": \":value天\"\n     }"
            ],
            "class": "Param"
        },
        {
            "file": "src/ux/ai/AI.Column.Cell.js",
            "line": 130,
            "description": "【高阶函数：二阶】列render方法处理函数，用于处理Datum类型：Tabular/Assist专用格式化\n* 配置项：DATUM\n* 附加配置项：$datum用于描述关联的信息，source = key, value和display对应值和呈现字段",
            "itemtype": "method",
            "name": "aiCellDatum",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "config",
                    "description": "单列配置数据",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Function(*=): *"
            },
            "example": [
                "\n\n     ...\n     {\n         \"title\": \"会计科目\",\n         \"dataIndex\": \"accountId\",\n         \"$render\": \"DATUM\",\n         \"$datum\": {\n             \"source\": \"account.item\",\n             \"value\": \"category\",\n             \"display\": \"name\"\n         }\n     }"
            ],
            "class": "Param"
        },
        {
            "file": "src/ux/ai/AI.Column.Op.js",
            "line": 138,
            "description": "【高阶函数：二阶】列render方法处理函数，用于处理Link类型：带操作的链接类型\n* 配置值：LINK\n* 附加配置想对复杂，用于处理操作链接，数组$config用于描述当前操作按钮\n     * 如果是divider的字符串则直接渲染分隔符（无操作）；\n     * 如果包含了dialogKey则表示当前按钮触发过后会显示dialog窗口；\n     * 如果包含了confirm，则会启用提示操作；\n     * 如果包含onClick则使用onClick生成确认函数，关联到Dialog中的Yes；如果包含confirm，则confirm就是窗口函数，onConfirm充当不带confirm时的onClick二阶函数；",
            "itemtype": "method",
            "name": "aiCellLink",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "config",
                    "description": "单列配置数据",
                    "type": "Object"
                },
                {
                    "name": "ops",
                    "description": "可传入的二阶函数，用于生成新的Click函数"
                }
            ],
            "return": {
                "description": "",
                "type": "Function(*=): *"
            },
            "example": [
                "\n\n     ...\n     {\n         \"title\": \"操作\",\n         \"dataIndex\": \"key\",\n         \"fixed\": \"left\",\n         \"$render\": \"LINK\",\n         \"$config\": [\n             {\n                 \"key\": \"btnEdit\",\n                 \"text\": \"编辑\",\n                 \"dialogKey\": \"dgEdit\",\n                 \"onClick\": \"fnEdit\"\n             },\n             \"divider\",\n             {\n                 \"key\": \"btnDelete\",\n                 \"text\": \"删除\",\n                 \"dataPath\": \"list.items\",\n                 \"confirm\": {\n                     \"title\": \"确认删除当前入住人？\",\n                     \"okText\": \"是\",\n                     \"cancelText\": \"否\",\n                     \"onConfirm\": \"fnRemove\"\n                 }\n             }\n         ]\n     }"
            ],
            "class": "Param"
        },
        {
            "file": "src/ux/ai/AI.Expr.String.js",
            "line": 127,
            "description": "顺序：field, optionItem.label, span, optionJsx.style.width, render, $KV$",
            "class": "Param"
        },
        {
            "file": "src/ux/ai/AI.Expr.String.js",
            "line": 131,
            "description": "如果是Object：只有metadata，然后包含各种options",
            "class": "Param"
        },
        {
            "file": "src/ux/ai/AI.Expr.String.js",
            "line": 182,
            "description": "顺序：name, icon, style",
            "class": "Param"
        },
        {
            "file": "src/ux/ai/AI.Expr.String.js",
            "line": 186,
            "description": "顺序：dataIndex, title, $render, sorter",
            "class": "Param"
        },
        {
            "file": "src/ux/ai/AI.Expr.String.js",
            "line": 192,
            "description": "顺序：key, label, style",
            "class": "Param"
        },
        {
            "file": "src/ux/ai/AI.Expr.String.js",
            "line": 214,
            "description": "顺序：title, key, icon, description, status",
            "class": "Param"
        },
        {
            "file": "src/ux/ai/AI.Expr.String.js",
            "line": 220,
            "description": "顺序：key, text, connectId, type, icon",
            "class": "Param"
        },
        {
            "file": "src/ux/ai/AI.Layout.Calculator.js",
            "line": 81,
            "description": "全行布局，没有label相关属性，直接占满整行信息",
            "class": "Param"
        },
        {
            "file": "src/ux/ai/AI.Layout.Calculator.js",
            "line": 91,
            "description": "span：当前组件所占宽度\ncolumns：当前行总列数\ncellIndex：当前组件所在的列索引",
            "class": "Param"
        },
        {
            "file": "src/ux/ai/AI.Layout.js",
            "line": 6,
            "description": "直接渲染多行",
            "params": [
                {
                    "name": "config",
                    "description": ""
                },
                {
                    "name": "jsx",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Any[]"
            },
            "class": "Param"
        },
        {
            "file": "src/ux/ai/AI.Link.js",
            "line": 7,
            "description": "根据key值检索读取资源配置节点，生成Label和链接地址",
            "itemtype": "method",
            "name": "aiHLink",
            "params": [
                {
                    "name": "reference",
                    "description": ""
                },
                {
                    "name": "key",
                    "description": ""
                }
            ],
            "class": "Param"
        },
        {
            "file": "src/ux/ai/AI.RxAnt.Datum.js",
            "line": 63,
            "description": "过滤器处理",
            "params": [
                {
                    "name": "reference",
                    "description": ""
                },
                {
                    "name": "filter",
                    "description": ""
                }
            ],
            "class": "Param"
        },
        {
            "file": "src/ux/fun/Ux.Param.js",
            "line": 52,
            "description": "针对Ajax的专用参数解析器，这种Ajax参数解析一般用于异步验证、交互过程中的异步请求处理",
            "itemtype": "method",
            "name": "parseAjax",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "parameters",
                    "description": "传入的参数值信息"
                }
            ],
            "class": "Param"
        },
        {
            "file": "src/ux/fun/Ux.Param.js",
            "line": 94,
            "description": "针对Query的专用参数解析器",
            "itemtype": "method",
            "name": "parseQuery",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "$query",
                    "description": "查询参数相关信息"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Param"
        },
        {
            "file": "src/ux/fun/Ux.Rdx.js",
            "line": 14,
            "description": "专写方法，更新list.items",
            "params": [
                {
                    "name": "reference",
                    "description": ""
                },
                {
                    "name": "values",
                    "description": ""
                },
                {
                    "name": "addKey",
                    "description": ""
                }
            ],
            "class": "Log"
        },
        {
            "file": "src/ux/fun/Ux.Redux.js",
            "line": 4,
            "description": "读取Tabular专用数据，读取所有数据，一般用于Rxjs",
            "itemtype": "method",
            "name": "rxDatum",
            "params": [
                {
                    "name": "data",
                    "description": "从响应数据中读取"
                },
                {
                    "name": "orderBy",
                    "description": "排序字段"
                }
            ],
            "class": "Log"
        },
        {
            "file": "src/ux/fun/Ux.Redux.js",
            "line": 21,
            "description": "读取Assist专用数据，指定某个key，一般用于Rxjs",
            "itemtype": "method",
            "name": "rxAssist",
            "params": [
                {
                    "name": "data",
                    "description": "从数据中转换"
                },
                {
                    "name": "orderBy",
                    "description": "排序字段"
                },
                {
                    "name": "key",
                    "description": ""
                }
            ],
            "class": "Log"
        },
        {
            "file": "src/ux/jsx/Ux.Jsx.Default.js",
            "line": 3,
            "description": "验证规则属性\nmessage：校验文件\ntype: 可选（内建类型）\nrequired：是否必填\nlen:字段长度\nmin:最小长度\nmax:最大长度\nenum: 枚举类型\npattern:正则表达式校验\ntransform:校验前转换字段值\nvalidator: 自定义校验",
            "itemtype": "method",
            "name": "_uiDisplay",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "row",
                    "description": "显示行数据"
                },
                {
                    "name": "addition",
                    "description": "额外风格"
                }
            ],
            "class": "Log"
        },
        {
            "file": "src/ux/jsx/Ux.Jsx.Op.js",
            "line": 104,
            "description": "第二参注定后续流程",
            "class": "Log"
        },
        {
            "file": "src/ux/jsx/Ux.Jsx.Op.js",
            "line": 121,
            "description": "Ant Form的提交专用按钮，其中会执行Ant Form的函数\nmetadata = {\n    text: 按钮上显示的文字\n    op: 按钮需要触发的绑定的key，从reference.state中提取\n    ...rest：其他的是按钮支持函数\n}",
            "class": "Log"
        },
        {
            "file": "src/ux/jsx/Ux.Jsx.Op.js",
            "line": 238,
            "description": "重定向专用链接按钮\nmetadata = {\n    text: 按钮上显示的文字\n    uri: 重定向的地址，包括/ima的前缀，环境变量中的设置\n}",
            "class": "Log"
        },
        {
            "file": "src/ux/jsx/Ux.Jsx.Single.js",
            "line": 34,
            "description": "Jsx单行字段的Render处理",
            "itemtype": "method",
            "name": "jsxItem",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "item",
                    "description": ""
                },
                {
                    "name": "render",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Log"
        },
        {
            "file": "src/ux/jsx/Ux.Jsx.View.Fn.js",
            "line": 10,
            "description": "渲染某一个Column的内容信息",
            "itemtype": "method",
            "name": "viewColumn",
            "params": [
                {
                    "name": "column",
                    "description": ""
                },
                {
                    "name": "content",
                    "description": ""
                }
            ],
            "class": "Log"
        },
        {
            "file": "src/ux/jsx/Ux.Jsx.View.Fn.js",
            "line": 32,
            "description": "渲染某一个Row的内容",
            "itemtype": "method",
            "name": "viewRow",
            "params": [
                {
                    "name": "columns",
                    "description": ""
                },
                {
                    "name": "flex",
                    "description": ""
                },
                {
                    "name": "content",
                    "description": ""
                }
            ],
            "class": "Log"
        },
        {
            "file": "src/ux/jsx/Ux.Jsx.View.Fn.js",
            "line": 53,
            "description": "渲染某一个Row的Title",
            "itemtype": "method",
            "name": "viewTitle",
            "params": [
                {
                    "name": "message",
                    "description": ""
                }
            ],
            "class": "Log"
        },
        {
            "file": "src/ux/jsx/Ux.Jsx.View.Fn.js",
            "line": 61,
            "description": "渲染某一个Row的Header",
            "itemtype": "method",
            "name": "viewHeader",
            "params": [
                {
                    "name": "message",
                    "description": ""
                }
            ],
            "class": "Log"
        },
        {
            "file": "src/ux/jsx/Ux.Jsx.View.Fn.js",
            "line": 70,
            "description": "渲染某一个单元格，主要用于处理上边的content",
            "params": [
                {
                    "name": "reference",
                    "description": ""
                },
                {
                    "name": "$data",
                    "description": ""
                },
                {
                    "name": "field",
                    "description": ""
                },
                {
                    "name": "config",
                    "description": ""
                },
                {
                    "name": "renders",
                    "description": ""
                }
            ],
            "class": "Log"
        },
        {
            "file": "src/ux/monitor/Mt.Logger.js",
            "line": 38,
            "description": "【开发模式】可重用控件组件日志打印",
            "itemtype": "method",
            "name": "control",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "Name",
                    "description": "当前控件名称"
                }
            ],
            "class": "Log"
        },
        {
            "file": "src/ux/monitor/Mt.Logger.js",
            "line": 51,
            "description": "【开发模式】页面组件日志打印",
            "itemtype": "method",
            "name": "page",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "Name",
                    "description": "当前控件名称"
                }
            ],
            "class": "Log"
        },
        {
            "file": "src/ux/monitor/Mt.Logger.js",
            "line": 64,
            "description": "【开发模式】纯函数组件日志打印",
            "itemtype": "method",
            "name": "stateless",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "Name",
                    "description": "当前控件名称"
                }
            ],
            "class": "Log"
        },
        {
            "file": "src/ux/monitor/Mt.Logger.js",
            "line": 80,
            "description": "【开发模式】Layout组件日志打印",
            "itemtype": "method",
            "name": "container",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "Name",
                    "description": "当前控件名称"
                }
            ],
            "class": "Log"
        },
        {
            "file": "src/ux/monitor/Mt.Logger.js",
            "line": 93,
            "description": "【开发模式】Page中的其他自定义组件日志打印",
            "itemtype": "method",
            "name": "component",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "Name",
                    "description": "当前控件名称"
                }
            ],
            "class": "Log"
        },
        {
            "file": "src/ux/monitor/Mt.Logger.js",
            "line": 106,
            "description": "【开发模式】Form专用组件日志打印",
            "itemtype": "method",
            "name": "form",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "Name",
                    "description": "当前控件名称"
                }
            ],
            "class": "Log"
        },
        {
            "file": "src/ux/monitor/Mt.Logger.js",
            "line": 119,
            "description": "【开发模式】过滤参数专用",
            "itemtype": "method",
            "name": "filters",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "input",
                    "description": "输入的Query参数"
                },
                {
                    "name": "query",
                    "description": "Prop属性中的Query参数"
                },
                {
                    "name": "filters",
                    "description": "最终搜索用的Query参数"
                },
                {
                    "name": "cond",
                    "description": "搜索条件"
                }
            ],
            "class": "Log"
        },
        {
            "file": "src/ux/monitor/Mt.Logger.js",
            "line": 141,
            "description": "【开发模式】签名专用函数",
            "itemtype": "method",
            "name": "sign",
            "params": [
                {
                    "name": "uri",
                    "description": "请求的Uri地址"
                },
                {
                    "name": "method",
                    "description": "请求的Http方法"
                },
                {
                    "name": "parameters",
                    "description": "请求的参数信息"
                },
                {
                    "name": "seed",
                    "description": "签名种子值"
                },
                {
                    "name": "sig",
                    "description": "签名最终结果"
                },
                {
                    "name": "secret",
                    "description": "签名的secret"
                }
            ],
            "class": "Log"
        },
        {
            "file": "src/ux/monitor/Mt.Logger.js",
            "line": 164,
            "description": "【开发模式】打印请求数据",
            "itemtype": "method",
            "name": "request",
            "params": [
                {
                    "name": "uri",
                    "description": "请求的Uri地址"
                },
                {
                    "name": "method",
                    "description": "请求的Http方法"
                },
                {
                    "name": "parameters",
                    "description": "请求的参数信息"
                },
                {
                    "name": "token",
                    "description": "当前请求的token"
                }
            ],
            "class": "Log"
        },
        {
            "file": "src/ux/monitor/Mt.Logger.js",
            "line": 183,
            "description": "【开发模式】打印响应信息",
            "itemtype": "method",
            "name": "response",
            "params": [
                {
                    "name": "data",
                    "description": "Ajax的错误对象"
                },
                {
                    "name": "params",
                    "description": "Ajax的正确响应"
                },
                {
                    "name": "method",
                    "description": "Http方法"
                },
                {
                    "name": "url",
                    "description": "访问基本信息"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Log"
        },
        {
            "file": "src/ux/monitor/Mt.Logger.js",
            "line": 219,
            "description": "直接打印错误信息（红色文字打印）",
            "itemtype": "method",
            "name": "error",
            "params": [
                {
                    "name": "error",
                    "description": ""
                }
            ],
            "class": "Log"
        },
        {
            "file": "src/ux/monitor/Mt.Logger.js",
            "line": 241,
            "description": "phase = 1，开始打印\nphase = 2，字段打印\nphase = 3，打印结束",
            "params": [
                {
                    "name": "item",
                    "description": ""
                },
                {
                    "name": "phase",
                    "description": ""
                }
            ],
            "class": "Log"
        },
        {
            "file": "src/ux/monitor/Mt.Logger.js",
            "line": 289,
            "description": "【开发模式，并且开启Mock】打印Mock数据",
            "itemtype": "method",
            "name": "mock",
            "params": [
                {
                    "name": "request",
                    "description": "请求数据",
                    "type": "Request"
                },
                {
                    "name": "response",
                    "description": "响应数据",
                    "type": "Response"
                },
                {
                    "name": "url",
                    "description": "请求的url",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Log"
        },
        {
            "file": "src/ux/monitor/Mt.Logger.js",
            "line": 311,
            "description": "【开发模式】直接打印数据",
            "itemtype": "method",
            "name": "debug",
            "params": [
                {
                    "name": "object",
                    "description": ""
                }
            ],
            "class": "Log"
        },
        {
            "file": "src/ux/monitor/Mt.Writer.js",
            "line": 6,
            "description": "读取当前的view处理",
            "class": "Action"
        },
        {
            "file": "src/ux/monitor/Mt.Writer.js",
            "line": 12,
            "description": "Tab页专用",
            "class": "Action"
        },
        {
            "file": "src/ux/monitor/Mt.Writer.js",
            "line": 20,
            "description": "记录专用",
            "class": "Action"
        },
        {
            "file": "src/ux/monitor/Mt.Writer.js",
            "line": 32,
            "params": [
                {
                    "name": "item",
                    "description": ""
                },
                {
                    "name": "id",
                    "description": ""
                }
            ],
            "class": "Action"
        },
        {
            "file": "src/ux/op/Ux.Action.js",
            "line": 6,
            "description": "Form专用提交方法，统一提交流程，reference的props属性中包含两个特殊属性\n1. form变量为Ant Design的Form创建的引用；\n2. $key变量标识Form的提交模式：$key = undefined则是添加模式；",
            "itemtype": "method",
            "name": "runSubmit",
            "params": [
                {
                    "name": "reference",
                    "description": "React专用组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "fnSuccess",
                    "description": "提交成功过后的回调函数",
                    "type": "Function"
                },
                {
                    "name": "fnFailure",
                    "description": "如果验证出现错误后的回调函数",
                    "type": "Function"
                }
            ],
            "example": [
                "\n\n    // Form提交专用流程\n    Ux.runSubmit(reference, data => {\n         const {$hotel} = reference.props;\n         if ($hotel && $hotel.is()) {\n             // 填充默认的酒店ID和Sigma相关值\n             data.hotelId = $hotel._(\"key\");\n             data.sigma = $hotel._(\"sigma\");\n             if (fnSubmit) {\n                 fnSubmit(data);\n             }\n         }\n    });"
            ],
            "class": "Action"
        },
        {
            "file": "src/ux/op/Ux.Connect.js",
            "line": 6,
            "description": "窗口onOk连接在函数，连接Html元素并设置onOk的触发器",
            "itemtype": "method",
            "name": "connectButton",
            "params": [
                {
                    "name": "dialog",
                    "description": "传入的dialog窗口配置"
                }
            ],
            "class": "Attribute"
        },
        {
            "file": "src/ux/op/Ux.Connect.js",
            "line": 24,
            "description": "链接某个ID的元素",
            "params": [
                {
                    "name": "id",
                    "description": ""
                }
            ],
            "class": "Attribute"
        },
        {
            "file": "src/ux/op/Ux.On.js",
            "line": 1,
            "description": "【高阶函数：三阶】用于显示对话框",
            "itemtype": "method",
            "name": "onShow",
            "params": [
                {
                    "name": "execFun",
                    "description": "二阶执行函数"
                },
                {
                    "name": "effectKey",
                    "description": "效果key"
                }
            ],
            "return": {
                "description": "",
                "type": "Function(*=): Function"
            },
            "class": "Attribute"
        },
        {
            "file": "src/ux/op/Ux.On.js",
            "line": 16,
            "description": "【高阶函数：三阶】用于隐藏对话框",
            "itemtype": "method",
            "name": "onHide",
            "params": [
                {
                    "name": "execFun",
                    "description": "二阶执行函数"
                },
                {
                    "name": "effectKey",
                    "description": "效果key"
                }
            ],
            "return": {
                "description": "",
                "type": "Function(*=): Function"
            },
            "class": "Attribute"
        },
        {
            "file": "src/ux/op/Ux.Pipe.js",
            "line": 7,
            "description": "链接Form初始化区分编辑和添加模式专用",
            "params": [
                {
                    "name": "reference",
                    "description": ""
                },
                {
                    "name": "fnAdd,",
                    "description": ""
                },
                {
                    "name": "fnUpdate",
                    "description": ""
                }
            ],
            "class": "Attribute"
        },
        {
            "file": "src/ux/op/Ux.Pipe.js",
            "line": 55,
            "description": "重置当前表单专用方法",
            "params": [
                {
                    "name": "reference",
                    "description": ""
                },
                {
                    "name": "dataArray",
                    "description": "输入的参数，默认是空值"
                }
            ],
            "class": "Attribute"
        },
        {
            "file": "src/ux/op/Ux.Pipe.js",
            "line": 71,
            "description": "验证当前的items中是否包含了数据信息",
            "params": [
                {
                    "name": "reference",
                    "description": ""
                }
            ],
            "class": "Attribute"
        },
        {
            "file": "src/ux/prop/Ux.Attribute.js",
            "line": 3,
            "description": "设置Ant Design中组件的属性：\n* DatePicker组件设置`disabledDate`属性；",
            "itemtype": "method",
            "name": "propFromNow",
            "params": [
                {
                    "name": "current",
                    "description": "当前组件的输入值"
                }
            ],
            "example": [
                "\n\n     // 设置disabledDate专用属性\n     arriveTime: (reference, jsx = {}) => {\n         jsx.disabledDate = Ux.propFromNow;\n         jsx.onChange = Op.dependByArriveTime(reference);\n         return (\n             <DatePicker {...jsx} />\n         )\n     },"
            ],
            "class": "Attribute"
        },
        {
            "file": "src/ux/prop/Ux.Field.js",
            "line": 9,
            "description": "二义性验证专用异步验证函数，返回值为true或false",
            "itemtype": "method",
            "name": "asyncTrue",
            "params": [
                {
                    "name": "config",
                    "description": "异步验证配置信息"
                },
                {
                    "name": "params",
                    "description": "传入参数信息"
                },
                {
                    "name": "callback",
                    "description": "异步验证完成后的回调对象，success为true回调，failure为false回调"
                },
                {
                    "name": "mock",
                    "description": "【Mock模式可用】"
                }
            ],
            "class": "Field"
        },
        {
            "file": "src/ux/prop/Ux.Field.js",
            "line": 36,
            "description": "异步验证专用函数，返回值为Object",
            "itemtype": "method",
            "name": "asyncData",
            "params": [
                {
                    "name": "config",
                    "description": "异步验证配置信息"
                },
                {
                    "name": "params",
                    "description": "传入参数信息"
                },
                {
                    "name": "callback",
                    "description": "异步验证完成后的回调函数"
                },
                {
                    "name": "mock",
                    "description": "【Mock模式可用】"
                }
            ],
            "class": "Field"
        },
        {
            "file": "src/ux/prop/Ux.Form.js",
            "line": 5,
            "description": "Ant Design中的Form清空专用方法",
            "itemtype": "method",
            "name": "formClear",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "data",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Hoc"
        },
        {
            "file": "src/ux/prop/Ux.Form.js",
            "line": 24,
            "description": "Ant Design中的Form读取，将`$record`记录中的数据读取到`data`中；",
            "itemtype": "method",
            "name": "formRead",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "data",
                    "description": "被修改的数据引用"
                }
            ],
            "class": "Hoc"
        },
        {
            "file": "src/ux/prop/Ux.Form.js",
            "line": 45,
            "description": "Ant Design中的Form的表单数据读取",
            "itemtype": "method",
            "name": "formGet",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "key",
                    "description": "指定重置的字段值"
                }
            ],
            "class": "Hoc"
        },
        {
            "file": "src/ux/prop/Ux.Form.js",
            "line": 60,
            "description": "Ant Design中的Form的表单重置函数",
            "itemtype": "method",
            "name": "formReset",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "keys",
                    "description": "指定重置的字段值"
                }
            ],
            "class": "Hoc"
        },
        {
            "file": "src/ux/prop/Ux.Form.js",
            "line": 76,
            "description": "Ant Design中的Form操作的二义性函数\n* `value`有值时直接设置`key`的表单值；\n* `value`为undefined时则直接读取Form中的`key`对应的值",
            "itemtype": "method",
            "name": "formHit",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "key",
                    "description": "字段名"
                },
                {
                    "name": "value",
                    "description": "字段值"
                }
            ],
            "return": {
                "description": "",
                "type": "Any"
            },
            "class": "Hoc"
        },
        {
            "file": "src/ux/prop/Ux.Form.js",
            "line": 99,
            "description": "Ant Design中的Form表单执行值设置",
            "itemtype": "method",
            "name": "formHits",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "values",
                    "description": "设置Form表单中的字段值"
                }
            ],
            "class": "Hoc"
        },
        {
            "file": "src/ux/prop/Ux.Hoc.js",
            "line": 4,
            "description": "通用属性读取相关信息",
            "itemtype": "method",
            "name": "toProp",
            "params": [
                {
                    "name": "props",
                    "description": "传入的React属性"
                },
                {
                    "name": "keys",
                    "description": "需提取的所有keys属性名集"
                }
            ],
            "class": "Hoc"
        },
        {
            "file": "src/ux/prop/Ux.Hoc.js",
            "line": 32,
            "description": "读取Tabular和Assist专用属性：`$t_`和`$a_`开头的属性值。",
            "itemtype": "method",
            "name": "toDatum",
            "params": [
                {
                    "name": "props",
                    "description": "传入的React属性"
                },
                {
                    "name": "keys",
                    "description": "需提取的所有keys属性名集"
                }
            ],
            "class": "Hoc"
        },
        {
            "file": "src/ux/prop/Ux.Hoc.js",
            "line": 59,
            "description": "读取组件的全称，和Cab.json中的namespace进行配合读取当前组件的全名",
            "itemtype": "method",
            "name": "toFullName",
            "params": [
                {
                    "name": "Component",
                    "description": "被封装的组件"
                },
                {
                    "name": "Cab",
                    "description": "链接资源文件",
                    "type": "JSON"
                },
                {
                    "name": "Name",
                    "description": "当前组件的名称（用于日志调试）",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Hoc"
        },
        {
            "file": "src/ux/prop/Ux.Hoc.js",
            "line": 75,
            "description": "从Uri中读取Query Parameter查询参数",
            "itemtype": "method",
            "name": "toQueryParameter",
            "params": [
                {
                    "name": "name",
                    "description": "待读取的参数名",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Hoc"
        },
        {
            "file": "src/ux/prop/Ux.Hoc.js",
            "line": 87,
            "description": "转换Less的风格文件，主要用于生成属性className和style中的backgroundImage\n全局前缀使用Cv.Env.CSS_PREFIX进行区分",
            "itemtype": "method",
            "name": "toStyle",
            "params": [
                {
                    "name": "name",
                    "description": "当前Class的名称"
                },
                {
                    "name": "bg",
                    "description": "背景图后缀"
                }
            ],
            "class": "Hoc"
        },
        {
            "file": "src/ux/prop/Ux.Item.js",
            "line": 3,
            "description": "读取当前表格中的记录信息，填充表格相关信息专用",
            "params": [
                {
                    "name": "reference",
                    "description": ""
                }
            ],
            "class": "Prop"
        },
        {
            "file": "src/ux/prop/Ux.Item.js",
            "line": 11,
            "description": "读取主记录的key信息：\n1. 添加模式读取主记录key：$addKey;\n2. 更新模式读取主记录key：$inited.key;",
            "class": "Prop"
        },
        {
            "file": "src/ux/prop/Ux.Item.js",
            "line": 34,
            "description": "$addKey不会消失，这里主要考虑两点\n1. editKey有值（子表单编辑）\n2. $inited有值的情况（编辑模式）",
            "class": "Prop"
        },
        {
            "file": "src/ux/prop/Ux.Item.js",
            "line": 54,
            "description": "读取Items专用方法，\n$items - 从list.items上读取的相关数据\n$parent - 包含了父记录数据，如果包含了则是（合并提交）",
            "params": [
                {
                    "name": "reference",
                    "description": ""
                }
            ],
            "class": "Prop"
        },
        {
            "file": "src/ux/prop/Ux.Prop.js",
            "line": 6,
            "description": "直接从Hoc资源路径读取数据信息",
            "itemtype": "method",
            "name": "fromPath",
            "params": [
                {
                    "name": "reference",
                    "description": ""
                },
                {
                    "name": "keys",
                    "description": ""
                }
            ],
            "class": "Prop"
        },
        {
            "file": "src/ux/prop/Ux.Prop.js",
            "line": 30,
            "description": "资源文件数据读取方法",
            "itemtype": "method",
            "name": "fromHoc",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "key",
                    "description": "读取对应属性名",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Null"
            },
            "class": "Prop"
        },
        {
            "file": "src/ux/prop/Ux.Prop.js",
            "line": 42,
            "description": "从路由参数中读取数据专用",
            "itemtype": "method",
            "name": "fromRouter",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "key",
                    "description": "读取对应属性名",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Null"
            },
            "class": "Prop"
        },
        {
            "file": "src/ux/prop/Ux.Prop.js",
            "line": 70,
            "description": "从reference的props中读取`key`对应的值，一般用于读取Tabular/Assist",
            "itemtype": "method",
            "name": "onDatum",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Prop"
        },
        {
            "file": "src/ux/prop/Ux.Prop.js",
            "line": 104,
            "description": "从React Router中读取路由参数",
            "itemtype": "method",
            "name": "onRouting",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "key",
                    "description": "需要读取的参数键名"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Prop"
        },
        {
            "file": "src/ux/prop/Ux.State.js",
            "line": 8,
            "description": "将数据会写状态树，props中需要包含`fnOut`函数",
            "itemtype": "method",
            "name": "writeTree",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "state",
                    "description": "写入的状态数据"
                },
                {
                    "name": "dft",
                    "description": "默认值"
                }
            ],
            "class": "State"
        },
        {
            "file": "src/ux/prop/Ux.State.js",
            "line": 80,
            "description": "list.items子列表专用方法，默认是Save模式",
            "params": [
                {
                    "name": "dataObject",
                    "description": ""
                },
                {
                    "name": "id",
                    "description": ""
                },
                {
                    "name": "deleted",
                    "description": ""
                },
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "class": "State"
        },
        {
            "file": "src/ux/prop/Ux.State.js",
            "line": 128,
            "description": "读取专用的带有`$_`前缀的属性值，主要用于从state状态中读取，Zero中所有的state中的键都是`$_`的格式。",
            "itemtype": "method",
            "name": "toEffect",
            "params": [
                {
                    "name": "state",
                    "description": "传入的React状态"
                }
            ],
            "class": "State"
        },
        {
            "file": "src/ux/prop/Ux.Validator.js",
            "line": 159,
            "description": "挂载Ant Design中的验证规则，访问`optionConfig`以及处理对应的`rules`节点",
            "itemtype": "method",
            "name": "mountValidator",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "item",
                    "description": ""
                }
            ],
            "class": "Validator"
        },
        {
            "file": "src/ux/rx/Rx.Transfer.js",
            "line": 4,
            "description": "创建不可变对象",
            "params": [
                {
                    "name": "values",
                    "description": ""
                },
                {
                    "name": "key",
                    "description": ""
                }
            ],
            "class": "Global"
        },
        {
            "file": "src/ux/system/Ux.Global.js",
            "line": 6,
            "description": "检查环境变量中的Session值判断用户是否登录",
            "itemtype": "method",
            "name": "isLogged",
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Global"
        },
        {
            "file": "src/ux/system/Ux.Global.js",
            "line": 17,
            "description": "当前应用是否初始化完成，初始化完成后将应用配置放到应用Key中",
            "itemtype": "method",
            "name": "isInit",
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Global"
        },
        {
            "file": "src/ux/system/Ux.Global.js",
            "line": 28,
            "description": "当前用户的注销行为",
            "itemtype": "method",
            "name": "toLogout",
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Global"
        },
        {
            "file": "src/ux/system/Ux.Global.js",
            "line": 37,
            "description": "执行路由操作",
            "itemtype": "method",
            "name": "toRoute",
            "params": [
                {
                    "name": "reference",
                    "description": ""
                },
                {
                    "name": "uri",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Global"
        },
        {
            "file": "src/ux/system/Ux.Global.js",
            "line": 66,
            "description": "配合React Router执行登录控制，如果未登录则直接转发到登录界面\n* reference引用中必须包含$router用于路由转发",
            "itemtype": "method",
            "name": "isAuthorized",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                }
            ],
            "class": "Global"
        },
        {
            "file": "src/ux/system/Ux.Store.js",
            "line": 38,
            "description": "存储应用程序配置",
            "itemtype": "method",
            "name": "storeApp",
            "params": [
                {
                    "name": "data",
                    "description": ""
                }
            ],
            "class": "Store"
        },
        {
            "file": "src/ux/system/Ux.Store.js",
            "line": 51,
            "description": "存储用户数据",
            "itemtype": "method",
            "name": "storeUser",
            "params": [
                {
                    "name": "data",
                    "description": ""
                }
            ],
            "class": "Store"
        },
        {
            "file": "src/ux/system/Ux.Store.js",
            "line": 94,
            "description": "SessionStorage存储数据",
            "itemtype": "method",
            "name": "Session.put",
            "params": [
                {
                    "name": "key",
                    "description": "存储键名",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "存储的键值"
                }
            ],
            "class": "Store"
        },
        {
            "file": "src/ux/system/Ux.Store.js",
            "line": 101,
            "description": "SessionStorage读取数据",
            "itemtype": "method",
            "name": "Session.get",
            "params": [
                {
                    "name": "key",
                    "description": "读取键名",
                    "type": "String"
                }
            ],
            "class": "Store"
        },
        {
            "file": "src/ux/system/Ux.Store.js",
            "line": 107,
            "description": "SessionStorage移除数据",
            "itemtype": "method",
            "name": "Session.remove",
            "params": [
                {
                    "name": "key",
                    "description": "移除键名",
                    "type": "String"
                }
            ],
            "class": "Store"
        },
        {
            "file": "src/ux/system/Ux.Store.js",
            "line": 113,
            "description": "SessionStorage清除",
            "itemtype": "method",
            "name": "Session.clear",
            "class": "Store"
        },
        {
            "file": "src/ux/system/Ux.Store.js",
            "line": 120,
            "description": "LocalStorage存储数据",
            "itemtype": "method",
            "name": "Storage.put",
            "params": [
                {
                    "name": "key",
                    "description": "存储键名",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "存储的键值"
                }
            ],
            "class": "Store"
        },
        {
            "file": "src/ux/system/Ux.Store.js",
            "line": 127,
            "description": "LocalStorage读取数据",
            "itemtype": "method",
            "name": "Storage.get",
            "params": [
                {
                    "name": "key",
                    "description": "读取键名",
                    "type": "String"
                }
            ],
            "class": "Store"
        },
        {
            "file": "src/ux/system/Ux.Store.js",
            "line": 133,
            "description": "LocalStorage移除数据",
            "itemtype": "method",
            "name": "Storage.remove",
            "params": [
                {
                    "name": "key",
                    "description": "移除键名",
                    "type": "String"
                }
            ],
            "class": "Store"
        },
        {
            "file": "src/ux/system/Ux.Store.js",
            "line": 139,
            "description": "LocalStorage清除",
            "itemtype": "method",
            "name": "Storage.clear",
            "class": "Store"
        },
        {
            "file": "src/ux/terminal/Ux.Terminal.Verify.js",
            "line": 52,
            "description": "专用ComplexList的错误检测函数",
            "params": [
                {
                    "name": "reference",
                    "description": ""
                },
                {
                    "name": "key",
                    "description": ""
                }
            ],
            "class": "Depend"
        },
        {
            "file": "src/ux/trigger/Ux.Depend.js",
            "line": 3,
            "description": "处理关联字段的只读数据信息，该reference必须是Ant Design中的Form相关值",
            "itemtype": "method",
            "name": "ReadOnlyDatum",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "sourceKey",
                    "description": "该sourceKey对应：Tabular/Assist专用的key值信息"
                },
                {
                    "name": "filterFun",
                    "description": "针对数据源处理的filter过滤函数信息，该过滤函数可将sourceKey结果Array处理掉"
                },
                {
                    "name": "formField",
                    "description": "依赖的Form中的字段值"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "example": [
                "\n\n     ...\n     surety: (reference, jsx = {}) => {\n         jsx.readOnly = Ux.dependReadOnlyDatum(\n             reference,\n             \"surety.type\",\n             item => {\n                 return \"None\" === item.code;\n             },\n             \"suretyType\"\n         );\n         // 是否删除placeholder\n         if (jsx.readOnly) {\n             delete jsx.placeholder;\n         }\n         return (<Input {...jsx} />)\n     },"
            ],
            "class": "Depend"
        },
        {
            "file": "src/ux/util/Ux.Encrypt.js",
            "line": 20,
            "description": "MD5加密函数，针对value进行MD5加密（全大小）",
            "itemtype": "method",
            "name": "encryptMD5",
            "params": [
                {
                    "name": "value",
                    "description": "被加密字符串"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Encrypt"
        },
        {
            "file": "src/ux/util/Ux.Encrypt.js",
            "line": 33,
            "description": "Base64编码函数，针对value进行Base64编码",
            "itemtype": "method",
            "name": "encryptBase64",
            "params": [
                {
                    "name": "value",
                    "description": "被编码字符串"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Encrypt"
        },
        {
            "file": "src/ux/util/Ux.Encrypt.js",
            "line": 42,
            "description": "Base64解码函数，针对value进行Base64解码",
            "itemtype": "method",
            "name": "decryptBase64",
            "params": [
                {
                    "name": "value",
                    "description": "被解码字符串"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Encrypt"
        },
        {
            "file": "src/ux/util/Ux.Encrypt.js",
            "line": 51,
            "description": "数字签名专用Hmac512算法加密，针对value和secret一起进行Hmac512数字签名加密",
            "itemtype": "method",
            "name": "encryptHmac512",
            "params": [
                {
                    "name": "value",
                    "description": "被签名字符串"
                },
                {
                    "name": "secret",
                    "description": "随机密钥"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Encrypt"
        },
        {
            "file": "src/ux/util/Ux.Expr.js",
            "line": 34,
            "description": "格式化字符串，将:x，:y使用params进行参数替换\n比如：/api/test/:name和{name:\"lang\"}两个合并成 => /api/test/lang",
            "itemtype": "method",
            "name": "formatExpr",
            "params": [
                {
                    "name": "input",
                    "description": "原始字符串",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "传入参数",
                    "type": "Object"
                },
                {
                    "name": "keep",
                    "description": "是否保持原始key",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Expr"
        },
        {
            "file": "src/ux/util/Ux.Expr.js",
            "line": 55,
            "description": "将参数追加到Query String中生成完整的uri链接。",
            "itemtype": "method",
            "name": "formatQuery",
            "params": [
                {
                    "name": "uri",
                    "description": "被格式化编码的Uri",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "将要追加的Query参数值",
                    "type": "Object"
                },
                {
                    "name": "encode",
                    "description": "是否针对参数进行uri encode编码，默认是需编码的",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Expr"
        },
        {
            "file": "src/ux/util/Ux.Expr.js",
            "line": 106,
            "description": "将传入时间进行格式化专用函数",
            "itemtype": "method",
            "name": "formatDate",
            "params": [
                {
                    "name": "value",
                    "description": "时间数值"
                },
                {
                    "name": "pattern",
                    "description": "输出的时间格式",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Expr"
        },
        {
            "file": "src/ux/util/Ux.Expr.js",
            "line": 114,
            "description": "将当前时间格式化专用函数",
            "itemtype": "method",
            "name": "formatNow",
            "params": [
                {
                    "name": "pattern",
                    "description": "输出的时间格式",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Expr"
        },
        {
            "file": "src/ux/util/Ux.Format.js",
            "line": 3,
            "description": "将传入值格式化成货币格式，该方法不带货币符号",
            "itemtype": "method",
            "name": "fmtCurrency",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Format"
        },
        {
            "file": "src/ux/util/Ux.Format.js",
            "line": 13,
            "description": "将传入值格式化成带百分比的字符串",
            "itemtype": "method",
            "name": "fmtPercent",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Format"
        },
        {
            "file": "src/ux/util/Ux.Html.js",
            "line": 3,
            "description": "读取Html原生组件的只读状态（必须在Mount之后）",
            "itemtype": "method",
            "name": "htmlReadOnly",
            "params": [
                {
                    "name": "id",
                    "description": "Html组件的ID"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Html"
        },
        {
            "file": "src/ux/util/Ux.Html.js",
            "line": 15,
            "description": "读取Html原生组件的禁用状态（必须在Mount之后）",
            "itemtype": "method",
            "name": "htmlDisabled",
            "params": [
                {
                    "name": "id",
                    "description": "Html组件的ID"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Html"
        },
        {
            "file": "src/ux/util/Ux.Html.js",
            "line": 36,
            "description": "聚焦输入组件时的错误验证（必须在Mount之后）",
            "itemtype": "method",
            "name": "htmlErrorFocus",
            "params": [
                {
                    "name": "item",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "Html"
        },
        {
            "file": "src/ux/util/Ux.Html.js",
            "line": 43,
            "description": "焦点移除时候的错误验证（必须在Mount之后）",
            "itemtype": "method",
            "name": "htmlErrorBlur",
            "params": [
                {
                    "name": "item",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "Html"
        },
        {
            "file": "src/ux/util/Ux.Icon.js",
            "line": 4,
            "description": "针对图标进行处理，类型包含icon和image两种\n* 如果type以`img:`开头，则使用`<img/>`标签\n* 其他情况则使用Ant Design中的`<Icon/>`处理",
            "itemtype": "method",
            "name": "uiIcon",
            "params": [
                {
                    "name": "type",
                    "description": "传入的字符串值",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Icon"
        },
        {
            "file": "src/ux/util/Ux.Random.js",
            "line": 5,
            "description": "生成固定长度的随机字符串",
            "itemtype": "method",
            "name": "randomString",
            "params": [
                {
                    "name": "length",
                    "description": "生成字符串的长度",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Random"
        },
        {
            "file": "src/ux/util/Ux.Random.js",
            "line": 21,
            "description": "随机生成UUID",
            "itemtype": "method",
            "name": "randomUUID",
            "class": "Random"
        },
        {
            "file": "src/ux/util/Ux.Sign.js",
            "line": 75,
            "description": "读取Token信息",
            "itemtype": "method",
            "name": "token",
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Sorter"
        },
        {
            "file": "src/ux/util/Ux.Sign.js",
            "line": 88,
            "description": "数字签名函数",
            "itemtype": "method",
            "name": "signature",
            "params": [
                {
                    "name": "uri",
                    "description": "Ajax访问专用Uri",
                    "type": "String"
                },
                {
                    "name": "method",
                    "description": "Http方法"
                },
                {
                    "name": "params",
                    "description": "Http参数"
                }
            ],
            "class": "Sorter"
        },
        {
            "file": "src/ux/util/Ux.Sorter.js",
            "line": 24,
            "description": "顺序排序",
            "itemtype": "method",
            "name": "sorterAsc",
            "params": [
                {
                    "name": "left",
                    "description": "左值"
                },
                {
                    "name": "right",
                    "description": "右值"
                },
                {
                    "name": "key",
                    "description": "排序的值，这种情况针对对象数组"
                }
            ],
            "return": {
                "description": "",
                "type": "Number|*"
            },
            "class": "Sorter"
        },
        {
            "file": "src/ux/util/Ux.Sorter.js",
            "line": 33,
            "description": "逆序排序",
            "itemtype": "method",
            "name": "sorterDesc",
            "params": [
                {
                    "name": "left",
                    "description": "左值"
                },
                {
                    "name": "right",
                    "description": "右值"
                },
                {
                    "name": "key",
                    "description": "排序的字段，这种清空针对对象数组"
                }
            ],
            "return": {
                "description": "",
                "type": "Number|*"
            },
            "class": "Sorter"
        },
        {
            "file": "src/ux/value/Ux.Value.Ct.js",
            "line": 7,
            "description": "针对JavaScript中的对象进行过滤",
            "itemtype": "method",
            "name": "valueFilter",
            "params": [
                {
                    "name": "data",
                    "description": "被过滤的数据对象"
                },
                {
                    "name": "keys",
                    "description": "保留的字段名集合"
                },
                {
                    "name": "orderBy",
                    "description": "排序字段"
                }
            ],
            "class": "Ajax"
        },
        {
            "file": "src/ux/value/Ux.Value.Ct.js",
            "line": 55,
            "description": "读取非undefined的值，去掉undefined值相关信息",
            "itemtype": "method",
            "name": "valueValid",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Ajax"
        },
        {
            "file": "src/ux/value/Ux.Value.Ct.js",
            "line": 108,
            "description": "不重复追加值到`item`对象中（包含则不设置）",
            "itemtype": "method",
            "name": "valueAppend",
            "params": [
                {
                    "name": "item",
                    "description": "被设置的对象引用"
                },
                {
                    "name": "field",
                    "description": "设置的字段名"
                },
                {
                    "name": "value",
                    "description": "设置的字段值"
                }
            ],
            "class": "Ajax"
        },
        {
            "file": "src/ux/value/Ux.Value.Date.js",
            "line": 4,
            "description": "直接转换数据成Moment对象，时间处理",
            "itemtype": "method",
            "name": "convertTime",
            "params": [
                {
                    "name": "value",
                    "description": "输入数据"
                },
                {
                    "name": "format",
                    "description": "格式"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Ajax"
        },
        {
            "file": "src/ux/value/Ux.Value.Date.js",
            "line": 27,
            "description": "根据from和to计算中间的duration差值\n* years - y\n* monthds -M\n* weeks -w\n* days - d\n* hours - h\n* minutes - m\n* seconds - s\n* milliseconds - ms",
            "itemtype": "method",
            "name": "valueDuration",
            "params": [
                {
                    "name": "from",
                    "description": "开始时间"
                },
                {
                    "name": "to",
                    "description": "结束时间"
                },
                {
                    "name": "mode",
                    "description": "计算模式"
                }
            ],
            "class": "Ajax"
        },
        {
            "file": "src/ux/value/Ux.Value.Date.js",
            "line": 51,
            "description": "根据开始时间计算结束时间",
            "itemtype": "method",
            "name": "valueEndTime",
            "params": [
                {
                    "name": "from",
                    "description": "开始时间"
                },
                {
                    "name": "duration",
                    "description": "时差"
                },
                {
                    "name": "mode",
                    "description": "计算模式"
                }
            ],
            "return": {
                "description": "",
                "type": "moment.Moment"
            },
            "class": "Ajax"
        },
        {
            "file": "src/ux/value/Ux.Value.Date.js",
            "line": 68,
            "description": "根据结束时间计算开始时间",
            "itemtype": "method",
            "name": "valueStartTime",
            "params": [
                {
                    "name": "to",
                    "description": "结束时间"
                },
                {
                    "name": "duration",
                    "description": "时差"
                },
                {
                    "name": "mode",
                    "description": "计算模式"
                }
            ],
            "return": {
                "description": "",
                "type": "moment.Moment"
            },
            "class": "Ajax"
        },
        {
            "file": "src/ux/value/Ux.Value.Event.js",
            "line": 4,
            "description": "变更专用处理",
            "itemtype": "method",
            "name": "valueTriggerChange",
            "params": [
                {
                    "name": "reference",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                },
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "field",
                    "description": ""
                },
                {
                    "name": "index",
                    "description": ""
                }
            ],
            "class": "Ajax"
        },
        {
            "file": "src/ux/value/Ux.Value.Math.js",
            "line": 5,
            "description": "连续乘法专用乘法计算",
            "itemtype": "method",
            "name": "mathMultiplication",
            "params": [
                {
                    "name": "seed",
                    "description": "第一操作数"
                },
                {
                    "name": "ops",
                    "description": "其他操作数"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Ajax"
        },
        {
            "file": "src/ux/value/Ux.Value.Math.js",
            "line": 23,
            "description": "专用除法运算",
            "itemtype": "method",
            "name": "mathDivision",
            "params": [
                {
                    "name": "dividend",
                    "description": "被除数"
                },
                {
                    "name": "divisor",
                    "description": "除数"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Ajax"
        },
        {
            "file": "src/ux/value/Ux.Value.Math.js",
            "line": 39,
            "description": "线性变化：\nObject( key = Array ) => Array拉平",
            "params": [
                {
                    "name": "data",
                    "description": ""
                },
                {
                    "name": "field",
                    "description": ""
                }
            ],
            "class": "Ajax"
        },
        {
            "file": "src/ux/value/Ux.Value.Math.js",
            "line": 57,
            "description": "求和",
            "params": [
                {
                    "name": "left",
                    "description": ""
                },
                {
                    "name": "right",
                    "description": ""
                }
            ],
            "class": "Ajax"
        },
        {
            "file": "src/ux/Ux.Ajax.Rx.js",
            "line": 11,
            "description": "统一处理Epic，引入Mock的RxJs处理远程访问",
            "itemtype": "method",
            "name": "rxEpic",
            "params": [
                {
                    "name": "type",
                    "description": "redux-act创建出来的Redux Action"
                },
                {
                    "name": "promise",
                    "description": "构造的Promise"
                },
                {
                    "name": "processor",
                    "description": "响应数据处理器，可用于处理response中的数据"
                },
                {
                    "name": "mockData",
                    "description": "【Mock环境可用】模拟数据"
                }
            ],
            "example": [
                "\n\n     // Act.Epic.js中的专用方法\n     fnFetchRoomType : $action => Ux.rxEpic(\n         $action.ofType(Types.fnFetchRoomType.getType()),\n         hotel => Ux.ajaxGet(\"/api/room-types/hotel/:hid\", {\n             hid : hotel.key\n         }),\n         data => Ux.rxAssist(data, \"room.type\"),\n         Mock.fnFetchRoomType\n     )"
            ],
            "class": "Ajax"
        },
        {
            "file": "src/ux/Ux.Ajax.Rx.js",
            "line": 62,
            "description": "【Epic升级版】统一处理Epic，新函数，简化操作，替换rxEpic专用",
            "itemtype": "method",
            "name": "rxEdict",
            "params": [
                {
                    "name": "type",
                    "description": "专用Action"
                },
                {
                    "name": "promise",
                    "description": "构造的promise，这个版本Promise中的Mock直接包含在内"
                },
                {
                    "name": "responser",
                    "description": "后期响应处理"
                }
            ],
            "class": "Ajax"
        },
        {
            "file": "src/ux/Ux.Ajax.js",
            "line": 12,
            "description": "Ajax远程访问过程中的Uri处理器",
            "itemtype": "method",
            "name": "ajaxUri",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "uri",
                    "description": "传入的原始路径，如：/api/app/:name",
                    "type": "String"
                },
                {
                    "name": "method",
                    "description": "传入的HTTP方法，默认为get",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "当前请求的参数数据",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Ajax"
        },
        {
            "file": "src/ux/Ux.Ajax.js",
            "line": 35,
            "description": "XSRF请求专用，从cookie中读取XSRF的Token",
            "itemtype": "method",
            "name": "ajaxXSRF",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "headers",
                    "description": ""
                }
            ],
            "class": "Ajax"
        },
        {
            "file": "src/ux/Ux.Ajax.js",
            "line": 47,
            "description": "Ajax远程访问过程中的Header处理器",
            "itemtype": "method",
            "name": "ajaxHeader",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "secure",
                    "description": "是否为安全模式？安全模式会添加Authorization头。",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Headers"
            },
            "class": "Ajax"
        },
        {
            "file": "src/ux/Ux.Ajax.js",
            "line": 67,
            "description": "Ajax中的特殊参数处理器，如果包含了$body字段值，则将该值当做可处理的参数处理，\n该方法参数主要用于处理带路径参数的POST/PUT方法同时使用的场景",
            "itemtype": "method",
            "name": "ajaxParams",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "params",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "example": [
                "\n\n     // PUT和POST的处理\n     Ux.ajaxPost(\"/api/and/tabulars/sigma/:sigma\", {\n         sigma : hotel.sigma,\n         $body : [\n             \"room.clean.status\",\n             \"room.status\",\n             \"room.op.status\"\n         ]\n     }),"
            ],
            "class": "Ajax"
        },
        {
            "file": "src/ux/Ux.Ajax.js",
            "line": 105,
            "params": [
                {
                    "name": "body",
                    "description": ""
                }
            ],
            "class": "Ajax"
        },
        {
            "file": "src/ux/Ux.Ajax.js",
            "line": 112,
            "description": "Ajax中的响应处理器，Promise调用返回过后的响应专用处理器",
            "itemtype": "method",
            "name": "ajaxResponse",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "request",
                    "description": "请求对象",
                    "type": "Request"
                },
                {
                    "name": "mockData",
                    "description": "【Mock环境可用】专用Mock响应处理",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<Response>"
            },
            "class": "Ajax"
        },
        {
            "file": "src/ux/Ux.Ajax.js",
            "line": 149,
            "description": "【高阶函数：二阶】Ajax统一调用的读取方法，生成统一的Ajax远程读取方法",
            "itemtype": "method",
            "name": "ajaxRead",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "method",
                    "description": "HTTP方法"
                },
                {
                    "name": "secure",
                    "description": "是否安全模式"
                }
            ],
            "class": "Ajax"
        },
        {
            "file": "src/ux/Ux.Ajax.js",
            "line": 171,
            "description": "【高阶函数：二阶】Ajax统一调用的读写双用方法，生成统一的Ajax远程调用方法，ajaxRead + ajaxWrite方法",
            "itemtype": "method",
            "name": "ajaxFull",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "method",
                    "description": "HTTP方法"
                },
                {
                    "name": "secure",
                    "description": "是否安全模式"
                }
            ],
            "class": "Ajax"
        },
        {
            "file": "src/ux/Ux.Ajax.js",
            "line": 189,
            "description": "Ajax日志函数，打印请求过程中的日志信息",
            "itemtype": "method",
            "name": "_logAjax",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "api",
                    "description": "当前Ajax请求的Uri路径"
                },
                {
                    "name": "method",
                    "description": "当前Ajax使用的HTTP方法"
                },
                {
                    "name": "params",
                    "description": "当前Ajax请求的参数信息"
                },
                {
                    "name": "mockData",
                    "description": "【Mock环境可用】当前Ajax请求的Mock数据"
                }
            ],
            "class": "Ajax"
        },
        {
            "file": "src/ux/Ux.Ajax.js",
            "line": 220,
            "description": "【高阶函数：二阶】Ajax统一调用的读取方法，生成统一的Ajax远程写数据方法",
            "itemtype": "method",
            "name": "ajaxWrite",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "method",
                    "description": "HTTP方法"
                },
                {
                    "name": "secure",
                    "description": "是否安全模式"
                }
            ],
            "class": "Ajax"
        },
        {
            "file": "src/ux/Ux.Ajax.js",
            "line": 238,
            "description": "构造微服务路径专用",
            "params": [
                {
                    "name": "serviceName",
                    "description": "服务名称"
                },
                {
                    "name": "uri",
                    "description": "服务专用URI"
                }
            ],
            "class": "Ajax"
        },
        {
            "file": "src/ux/Ux.Ajax.js",
            "line": 292,
            "description": "secure = false，非安全模式的读取方法，HttpMethod = GET，底层调ajaxRead",
            "itemtype": "method",
            "name": "ajaxFetch",
            "params": [
                {
                    "name": "uri",
                    "description": "该Ajax调用的Uri路径"
                },
                {
                    "name": "params",
                    "description": "请求参数"
                },
                {
                    "name": "mockData",
                    "description": "【Mock环境可用】模拟数据"
                }
            ],
            "class": "Ajax"
        },
        {
            "file": "src/ux/Ux.Ajax.js",
            "line": 303,
            "description": "secure = false，非安全模式的写方法，HttpMethod = POST，底层调ajaxWrite",
            "itemtype": "method",
            "name": "ajaxPush",
            "params": [
                {
                    "name": "uri",
                    "description": "该Ajax调用的Uri路径"
                },
                {
                    "name": "params",
                    "description": "请求参数"
                },
                {
                    "name": "mockData",
                    "description": "【Mock环境可用】模拟数据"
                }
            ],
            "class": "Ajax"
        },
        {
            "file": "src/ux/Ux.Ajax.js",
            "line": 314,
            "description": "secure = true，安全模式的读取方法，HttpMethod = GET，底层调ajaxRead",
            "itemtype": "method",
            "name": "ajaxGet",
            "params": [
                {
                    "name": "uri",
                    "description": "该Ajax调用的Uri路径"
                },
                {
                    "name": "params",
                    "description": "请求参数"
                },
                {
                    "name": "mockData",
                    "description": "【Mock环境可用】模拟数据"
                }
            ],
            "class": "Ajax"
        },
        {
            "file": "src/ux/Ux.Ajax.js",
            "line": 325,
            "description": "secure = true，安全模式的写方法，HttpMethod = POST，底层调ajaxFull",
            "itemtype": "method",
            "name": "ajaxPost",
            "params": [
                {
                    "name": "uri",
                    "description": "该Ajax调用的Uri路径"
                },
                {
                    "name": "params",
                    "description": "请求参数"
                },
                {
                    "name": "mockData",
                    "description": "【Mock环境可用】模拟数据"
                }
            ],
            "class": "Ajax"
        },
        {
            "file": "src/ux/Ux.Ajax.js",
            "line": 336,
            "description": "secure = true，安全模式的写方法，HttpMethod = PUT，底层调ajaxFull",
            "itemtype": "method",
            "name": "ajaxPut",
            "params": [
                {
                    "name": "uri",
                    "description": "该Ajax调用的Uri路径"
                },
                {
                    "name": "params",
                    "description": "请求参数"
                },
                {
                    "name": "mockData",
                    "description": "【Mock环境可用】模拟数据"
                }
            ],
            "class": "Ajax"
        },
        {
            "file": "src/ux/Ux.Ajax.js",
            "line": 347,
            "description": "secure = true，安全模式的写方法，HttpMethod = DELETE，底层调ajaxFull",
            "itemtype": "method",
            "name": "ajaxDelete",
            "params": [
                {
                    "name": "uri",
                    "description": "该Ajax调用的Uri路径"
                },
                {
                    "name": "params",
                    "description": "请求参数"
                },
                {
                    "name": "mockData",
                    "description": "【Mock环境可用】模拟数据"
                }
            ],
            "class": "Ajax"
        },
        {
            "file": "src/ux/Ux.Column.js",
            "line": 3,
            "description": "Ant Design的Table组件专用的专用属性`columns`列处理器，处理每一列的`render`属性",
            "itemtype": "method",
            "name": "uiColumnRender",
            "params": [
                {
                    "name": "reference",
                    "description": ""
                },
                {
                    "name": "columns",
                    "description": ""
                },
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "fnRender",
                    "description": ""
                },
                {
                    "name": "hoc",
                    "description": "是否生成函数",
                    "type": "Boolean"
                }
            ],
            "class": "Column"
        },
        {
            "file": "src/ux/Ux.Column.js",
            "line": 16,
            "description": "Ant Design的Table组件的Table组件专用属性`columns`列处理器，处理每一列的`render`属性",
            "itemtype": "method",
            "name": "uiTableColumn",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "columns",
                    "description": "当前Table组件的columns配置",
                    "type": "Array"
                },
                {
                    "name": "ops",
                    "description": "当前列是否可操作列：如列中包含了编辑、删除按钮"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Column"
        },
        {
            "file": "src/ux/Ux.Column.js",
            "line": 34,
            "description": "Ant Design中的Table组件的Table组件专用属性`pagination`处理",
            "itemtype": "method",
            "name": "uiTablePager",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "pager",
                    "description": "分页对象，包含了`size`和`page`两个属性",
                    "type": "Object"
                },
                {
                    "name": "count",
                    "description": "当前分页组件的数据中的记录数",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Column"
        },
        {
            "file": "src/ux/Ux.Column.js",
            "line": 52,
            "description": "【高阶函数：二阶】Ant Design中的Table组件专用属性`rowSelection`生成函数",
            "itemtype": "method",
            "name": "uiTableSelection",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Column"
        },
        {
            "file": "src/ux/Ux.Debug.js",
            "line": 6,
            "description": "将传入的值`data`下载成一个文件保存，文件名系统生成，该文件名被转换过，所以调用时使用Ux调用",
            "itemtype": "method",
            "name": "dgFileJson",
            "params": [
                {
                    "name": "data",
                    "description": "传入的数据",
                    "type": "Object|Array"
                },
                {
                    "name": "ext",
                    "description": "保存的文件格式后缀名，默认为.json"
                },
                {
                    "name": "filename",
                    "description": "需要固定的文件前缀"
                }
            ],
            "example": [
                "\n\n     // 设置文件中将保存的数据\n     const data = {\n         username:\"Lang\",\n         password:\"Lang\"\n     };\n     Ux.dgFileJson(data);"
            ],
            "class": "Debug"
        },
        {
            "file": "src/ux/Ux.Debug.js",
            "line": 31,
            "description": "【Development Only】\n在调试模式才启用的Form专用打印信息，打印Form初始化过程中的表单数据\n支持两种模式：updated = true为更新Form时的数据，updated = false则是添加时的数据",
            "itemtype": "method",
            "name": "dgForm",
            "params": [
                {
                    "name": "reference",
                    "description": "包含了form变量的React的组件Component引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "data",
                    "description": "当前Form中的表单数据"
                },
                {
                    "name": "updated",
                    "description": "判断当前调试使用的是更新/添加模式"
                }
            ],
            "class": "Debug"
        },
        {
            "file": "src/ux/Ux.Debug.js",
            "line": 48,
            "description": "【Development Only】\nUx包的报表专用调试方法，整个应用中只有一处调用该方法",
            "itemtype": "method",
            "name": "dgScript",
            "params": [
                {
                    "name": "ux",
                    "description": "Ux工具包"
                },
                {
                    "name": "Cv",
                    "description": "常量信息"
                }
            ],
            "class": "Debug"
        },
        {
            "file": "src/ux/Ux.Debug.js",
            "line": 63,
            "description": "【Development Only】\n自动生成路由中的路由报表，可查看所有的路由信息",
            "itemtype": "method",
            "name": "dgRouter",
            "params": [
                {
                    "name": "container",
                    "description": "Layout模板配置信息"
                },
                {
                    "name": "component",
                    "description": "Page组件配置信息"
                }
            ],
            "class": "Debug"
        },
        {
            "file": "src/ux/Ux.Debug.js",
            "line": 78,
            "description": "【Development Only】\nRxjs专用调试打印方法，执行过后返回data",
            "itemtype": "method",
            "name": "dgMonitor",
            "params": [
                {
                    "name": "data",
                    "description": "传入需要打印的数据信息"
                },
                {
                    "name": "second",
                    "description": "传入的第二个参数，对比打印时需要"
                }
            ],
            "return": {
                "description": "返回传入的数据"
            },
            "class": "Debug"
        },
        {
            "file": "src/ux/Ux.Dialog.js",
            "line": 32,
            "description": "错误信息显示窗口",
            "itemtype": "method",
            "name": "showError",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "message",
                    "description": "直接呈现的消息"
                },
                {
                    "name": "fnSuccess",
                    "description": "窗口按钮的回调函数",
                    "type": "Function"
                }
            ],
            "class": "Dialog",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Dialog.js",
            "line": 44,
            "description": "成功信息显示专用窗口",
            "itemtype": "method",
            "name": "showSuccess",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "message",
                    "description": "直接呈现的消息"
                },
                {
                    "name": "fnSuccess",
                    "description": "窗口按钮的回调函数",
                    "type": "Function"
                }
            ],
            "class": "Dialog",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Dialog.js",
            "line": 125,
            "description": "显示窗口专用函数，该函数用于根据资源文件中的配置信息显示窗口，资源文件必须包含`_modal`或`modal`节点；\n* key用于从`modal`配置中提取窗口信息",
            "itemtype": "method",
            "name": "showDialog",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "key",
                    "description": "提取配置的key值",
                    "type": "String"
                },
                {
                    "name": "fnSuccess",
                    "description": "窗口按钮的回调函数",
                    "type": "Function"
                },
                {
                    "name": "params",
                    "description": "传入参数，用于处理message专用",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\n     ...\n     \"_modal\": {\n         \"type\": \"success\",\n         \"message\": {\n             \"add\": \"您的账单项目添加成功！\",\n             \"edit\": \"您的账单项目保存成功！\"\n         }\n     }"
            ],
            "class": "Dialog",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Dialog.js",
            "line": 148,
            "description": "显示窗口专用函数，该函数用于根据资源文件中的配置信息显示窗口，资源文件必须包含`_modal`或`modal`节点；\n* key用于从`modal`配置中提取窗口信息",
            "itemtype": "method",
            "name": "showMessage",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "key",
                    "description": "提取配置的key值",
                    "type": "String"
                },
                {
                    "name": "fnSuccess",
                    "description": "窗口按钮的回调函数",
                    "type": "Function"
                },
                {
                    "name": "params",
                    "description": "传入参数，用于处理message专用",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\n     ...\n     \"_modal\": {\n         \"type\": \"success\",\n         \"message\": {\n             \"add\": \"您的账单项目添加成功！\",\n             \"edit\": \"您的账单项目保存成功！\"\n         }\n     }"
            ],
            "class": "Dialog",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Dialog.js",
            "line": 171,
            "description": "显示窗口专用函数，直接和React的组件联合使用\n* `fnShow`函数必须存在于reference.props",
            "itemtype": "method",
            "name": "fadeIn",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                }
            ],
            "class": "Dialog",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Dialog.js",
            "line": 184,
            "description": "隐藏窗口专用函数，直接和React的组件联合使用\n* `fnHide`函数必须存在于reference.props",
            "itemtype": "method",
            "name": "fadeOut",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                }
            ],
            "class": "Dialog",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Env.js",
            "line": 12,
            "description": "自动生成路由专用函数",
            "itemtype": "method",
            "name": "route",
            "params": [
                {
                    "name": "container",
                    "description": "生成路由的Layout组件"
                },
                {
                    "name": "components",
                    "description": "生成路由的Page组件"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Env",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Env.js",
            "line": 81,
            "description": "Redux专用状态树的写入方法",
            "itemtype": "method",
            "name": "dataOut",
            "params": [
                {
                    "name": "data",
                    "description": "被写入的数据"
                }
            ],
            "class": "Env",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Env.js",
            "line": 87,
            "description": "Redux专用状态树的读取方法",
            "itemtype": "method",
            "name": "dataIn",
            "params": [
                {
                    "name": "state",
                    "description": "Redux读取到的状态"
                }
            ],
            "class": "Env",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Env.js",
            "line": 93,
            "description": "初始化专用方法",
            "params": [
                {
                    "name": "input",
                    "description": ""
                }
            ],
            "class": "Env",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Env.js",
            "line": 109,
            "description": "初始化数据",
            "class": "Env",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Env.js",
            "line": 114,
            "description": "增强版的拷贝方法，支持多种模式",
            "class": "Env",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Env.js",
            "line": 123,
            "description": "Redux中的Action专用创建函数",
            "itemtype": "method",
            "name": "createAction",
            "params": [
                {
                    "name": "path",
                    "description": "创建的Action对应的路径"
                }
            ],
            "class": "Env",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Env.js",
            "line": 130,
            "description": "专用zero的注解",
            "itemtype": "method",
            "name": "zero",
            "class": "Env",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Jsx.js",
            "line": 16,
            "description": "仅渲染交互式组件，Grid布局",
            "itemtype": "method",
            "name": "jsxFieldGrid",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "renders",
                    "description": "每个字段不同的render方法"
                },
                {
                    "name": "column",
                    "description": "当前Form的列数量"
                },
                {
                    "name": "values",
                    "description": "Form的初始化值"
                },
                {
                    "name": "config",
                    "description": "Form相关配置项"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Jsx",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Jsx.js",
            "line": 38,
            "description": "渲染某个子表单的Page页",
            "itemtype": "method",
            "name": "jsxFieldPage",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "renders",
                    "description": "每个字段不同的render方法"
                },
                {
                    "name": "column",
                    "description": "当前Form的列数量"
                },
                {
                    "name": "config",
                    "description": "Form的初始化配置"
                },
                {
                    "name": "values",
                    "description": "读取的初始值"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Jsx",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Jsx.js",
            "line": 62,
            "description": "window的合法值\n1：标准布局\n1/3：搜索栏专用值\n0.4：宽Label专用值",
            "class": "Jsx",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Jsx.js",
            "line": 159,
            "description": "登录页这种单列布局使用\n配置文件格式【一维数组】\n\"_form\":{\n    \"ui\":[\n        {\n        }\n    ]\n}",
            "class": "Jsx",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Jsx.js",
            "line": 172,
            "description": "Grid布局使用\n配置文件格式【二维数组】\n\"_form\":{\n    \"ui\":[\n        [\n             {\n             }\n        ]\n    ]\n}",
            "class": "Jsx",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Normalize.js",
            "line": 99,
            "description": "处理当前Form中的input控件专用信息",
            "itemtype": "method",
            "name": "extractForm",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "key",
                    "description": "读取的配置值"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Normalize",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Normalize.js",
            "line": 113,
            "description": "分组处理Form中的input控件专用",
            "itemtype": "method",
            "name": "extractGroupForm",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "groupIndex",
                    "description": "组对应的索引值"
                }
            ],
            "class": "Normalize",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Normalize.js",
            "line": 132,
            "description": "处理当前Form中的button或操作按钮配置信息",
            "itemtype": "method",
            "name": "extractOp",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "op",
                    "description": "操作事件集"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Normalize",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Normalize.js",
            "line": 144,
            "description": "绑定Op专用，主要用于onClick的绑定操作",
            "class": "Normalize",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Normalize.js",
            "line": 161,
            "description": "处理type = hidden类型的配置信息",
            "itemtype": "method",
            "name": "extractHidden",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                }
            ],
            "return": {
                "description": "}"
            },
            "class": "Normalize",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Op.js",
            "line": 3,
            "description": "componentDidUpdate中的List专用生命周期函数",
            "itemtype": "method",
            "name": "cycleUpdatePageList",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "key",
                    "description": "数据对应的props中的键值，默认使用`$list`；"
                },
                {
                    "name": "prevProps",
                    "description": "之前的属性信息"
                }
            ],
            "class": "Op",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Op.js",
            "line": 22,
            "description": "componentDidUnmount生命的Form专用函数",
            "itemtype": "method",
            "name": "cycleDestoryForm",
            "params": [
                {
                    "name": "props",
                    "description": "当前属性"
                },
                {
                    "name": "prevProps",
                    "description": "之前属性"
                }
            ],
            "class": "Op",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Op.js",
            "line": 52,
            "description": "componentDidUpdate的Form组件生命周期专用函数",
            "itemtype": "method",
            "name": "cycleUpdateForm",
            "params": [
                {
                    "name": "props",
                    "description": "当前属性"
                },
                {
                    "name": "prevProps",
                    "description": "之前属性"
                }
            ],
            "class": "Op",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Type.js",
            "line": 8,
            "description": "在数组中查找唯一元素",
            "itemtype": "method",
            "name": "elementUnique",
            "params": [
                {
                    "name": "data",
                    "description": "查找的数组",
                    "type": "Array"
                },
                {
                    "name": "field",
                    "description": "字段",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "class": "Type",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Type.js",
            "line": 28,
            "description": "数组拉平专用算法，以子节点field中的key为主",
            "itemtype": "method",
            "name": "elementFlat",
            "params": [
                {
                    "name": "array",
                    "description": "被追加的数组",
                    "type": "Array"
                },
                {
                    "name": "field",
                    "description": "需要拉平的字段值"
                }
            ],
            "class": "Type",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Type.js",
            "line": 89,
            "description": "数组连接Tabular/Assist专用算法",
            "params": [
                {
                    "name": "array",
                    "description": "原始数组信息"
                },
                {
                    "name": "target",
                    "description": "被连接的数组信息"
                },
                {
                    "name": "field",
                    "description": "需要执行的key = element[field]的条件查找唯一元素"
                },
                {
                    "name": "mapping",
                    "description": "执行最终的mapping动作：from -> to"
                }
            ],
            "class": "Type",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Type.js",
            "line": 118,
            "description": "返回数组的第一个元素中的field字段值\n* field有值则返回对应的Object的字段值\n* field没有值则直接返回该元素",
            "itemtype": "method",
            "name": "elementFirst",
            "params": [
                {
                    "name": "data",
                    "description": "查找的数组",
                    "type": "Array"
                },
                {
                    "name": "field",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Type",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Type.js",
            "line": 140,
            "description": "按`filters`过滤查询Array对应的值",
            "itemtype": "method",
            "name": "elementFind",
            "params": [
                {
                    "name": "data",
                    "description": "查找的数组",
                    "type": "Array"
                },
                {
                    "name": "filters",
                    "description": "查找条件"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Type",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Type.js",
            "line": 168,
            "description": "按`filters`中的条件模糊匹配Array对应的值",
            "itemtype": "method",
            "name": "elementMatch",
            "params": [
                {
                    "name": "data",
                    "description": "查找的数组",
                    "type": "Array"
                },
                {
                    "name": "filters",
                    "description": "查找条件"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Type",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Type.js",
            "line": 188,
            "description": "遍历数组中的某个字段，并处理该字段对应的`field`的值",
            "itemtype": "method",
            "name": "itElement",
            "params": [
                {
                    "name": "data",
                    "description": "被遍历的数组",
                    "type": "Array"
                },
                {
                    "name": "field",
                    "description": "需要替换的字段",
                    "type": "String"
                },
                {
                    "name": "itemFun",
                    "description": "替换函数",
                    "type": "Function"
                }
            ],
            "class": "Type",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Type.js",
            "line": 205,
            "description": "遍历对象直接处理key = value",
            "itemtype": "method",
            "name": "itObject",
            "params": [
                {
                    "name": "data",
                    "description": "被遍历的对象"
                },
                {
                    "name": "executor",
                    "description": "处理函数",
                    "type": "Function"
                }
            ],
            "class": "Type",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Type.js",
            "line": 251,
            "description": "二维数组遍历专用",
            "itemtype": "method",
            "name": "itMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "被遍历的二维数组（矩阵）"
                },
                {
                    "name": "eachFun",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "返回原始的Matrix",
                "type": "Matrix"
            },
            "class": "Type",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Type.js",
            "line": 275,
            "description": "Array数组中的属性映射处理",
            "itemtype": "method",
            "name": "elementVertical",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "field",
                    "description": "需要映射的字段名"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Type",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Type.js",
            "line": 295,
            "description": "遍历专用函数，二维遍历",
            "itemtype": "method",
            "name": "itFull",
            "params": [
                {
                    "name": "data",
                    "description": "被遍历的数组",
                    "type": "Array"
                },
                {
                    "name": "items",
                    "description": "被遍历的对象",
                    "type": "Object"
                },
                {
                    "name": "fieldFun",
                    "description": "操作函数",
                    "type": "Function"
                }
            ],
            "class": "Type",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Type.js",
            "line": 322,
            "description": "不重复元素追加\n* 如果是对象则检查key属性是否重复\n* 如果不是对象则直接追加",
            "itemtype": "method",
            "name": "elementAdd",
            "params": [
                {
                    "name": "array",
                    "description": "被追加的数组",
                    "type": "Array"
                },
                {
                    "name": "element",
                    "description": "元素信息"
                }
            ],
            "class": "Type",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Type.js",
            "line": 345,
            "description": "左右值处理，如果存在则移除，如果不存在直接添加",
            "itemtype": "method",
            "name": "elementSwitch",
            "params": [
                {
                    "name": "array",
                    "description": "传入的数组",
                    "type": "Array"
                },
                {
                    "name": "element",
                    "description": "处理的元素信息"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Type",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Type.js",
            "line": 361,
            "description": "查找一个颗树的某个分支构成一个新的数组",
            "itemtype": "method",
            "name": "elementBranch",
            "params": [
                {
                    "name": "array",
                    "description": "被查找的数",
                    "type": "Array"
                },
                {
                    "name": "leafKey",
                    "description": "过滤条件"
                },
                {
                    "name": "parentField",
                    "description": "父节点字段"
                }
            ],
            "class": "Type",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Type.js",
            "line": 382,
            "description": "查找一颗树以及它下边的所有新数组",
            "itemtype": "method",
            "name": "elementChildren",
            "params": [
                {
                    "name": "array",
                    "description": "被查找的数",
                    "type": "Array"
                },
                {
                    "name": "parentKey",
                    "description": "过滤条件"
                },
                {
                    "name": "parentField",
                    "description": ""
                }
            ],
            "class": "Type",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Type.js",
            "line": 401,
            "description": "针对数组中的某个字段求和",
            "itemtype": "method",
            "name": "elementSum",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "field",
                    "description": "需要映射的字段名"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Type",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Type.js",
            "line": 414,
            "description": "构造一颗专用的树桩结构，用于表格的处理，config的配置项如下\n\n     ...\n     {\n         \"id\":\"用于构造树的记录主键，默认值为id\",\n         \"pid\":\"用于构造树的父节点字段，默认值为pid\",\n         \"value\":\"用于构造树的记录值，默认值为value\",\n         \"label\":\"默认用于构造树的呈现字段，默认值为label\",\n         \"expr\":\"如果该值支持表达式结构，则使用exprLabel代替label\",\n         \"sort\":\"当前Tree中节点的排序字段，没有默认值\"\n     }\n数组中必须包含`level`字段：树的深度字段，必须包含该值，使用该值进行树的运算。",
            "itemtype": "method",
            "name": "tree",
            "params": [
                {
                    "name": "array",
                    "description": "原始数组",
                    "type": "Array"
                },
                {
                    "name": "config",
                    "description": "构造时的树的配置信息",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "DataTree | *"
            },
            "class": "Type",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Type.js",
            "line": 433,
            "description": "带过滤条件的Tree专用，内置调用tree方法",
            "itemtype": "method",
            "name": "treeWithFilters",
            "params": [
                {
                    "name": "array",
                    "description": "原始数组",
                    "type": "Array"
                },
                {
                    "name": "filters",
                    "description": "过滤条件"
                },
                {
                    "name": "config",
                    "description": "构造时的树的配置信息",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "DataTree|*"
            },
            "class": "Type",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Type.js",
            "line": 453,
            "description": "增强Unique，查找Tabuler/Assist专用",
            "itemtype": "method",
            "name": "elementUniqueDatum",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "key",
                    "description": "被命中的key"
                },
                {
                    "name": "field",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "class": "Type",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Type.js",
            "line": 467,
            "description": "增强Find，查找Tabular/Assist专用",
            "itemtype": "method",
            "name": "elementFindDatum",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "key",
                    "description": "被命中的key"
                },
                {
                    "name": "filters",
                    "description": "查询条件"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Type",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Type.js",
            "line": 477,
            "description": "增强First，查找Tabular/Assist专用",
            "itemtype": "method",
            "name": "elementFirstDatum",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "React.PureComponent"
                },
                {
                    "name": "key",
                    "description": "被命中的key"
                },
                {
                    "name": "field",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Type",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Value.js",
            "line": 8,
            "description": "两个字符串的专用连接方法，用于做不重复链接，",
            "itemtype": "method",
            "name": "stringConnect",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "left",
                    "description": ""
                },
                {
                    "name": "right",
                    "description": ""
                }
            ],
            "class": "Value",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Value.js",
            "line": 38,
            "description": "mode = 0：调用原生的Object.assign：直接覆盖\nmode = 1：将source中的属性追加到target中，深度追加\nmode = 2：将source中的属性追加到target中，没有时追加",
            "params": [
                {
                    "name": "target",
                    "description": ""
                },
                {
                    "name": "source",
                    "description": ""
                },
                {
                    "name": "mode",
                    "description": ""
                }
            ],
            "class": "Value",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Value.js",
            "line": 129,
            "description": "二义性函数，传入的是string就执行parse处理",
            "params": [
                {
                    "name": "input",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Value",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.js",
            "line": 53,
            "description": "Uson - 数据结构\nUarr = 数据结构",
            "class": "",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.js",
            "line": 58,
            "description": "触发控件专用",
            "class": "",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.js",
            "line": 62,
            "description": "Global全局数据处理",
            "class": "",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.js",
            "line": 66,
            "description": "Action Run专用,\n按钮Connect专用\nOn绑定专用\npipe 专用方法",
            "class": "",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.js",
            "line": 73,
            "description": "rdx - 系列方法\nrt - Ajax响应处理专用方法\nir - 分页列表系列方法\nparse - 解析专用",
            "class": "",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.js",
            "line": 80,
            "description": "Attribute：属性处理\nField：异步验证\nForm：Ant Design Form中的相关操作\nHoc：高阶组件专用方法\nState：状态处理\nProp：属性处理\nValidator：验证器处理",
            "class": "",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.js",
            "line": 90,
            "description": "Encrypt：加密库\nFormat：Format格式化\nRandom：随机数生成\nSorter：列排序专用\nExpr：表达式格式化\nSign：签名处理\nHtml：专用Html属性处理\nIcon：图标处理",
            "class": "",
            "module": "Ux"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/app/function/shared/Fn.UI.js:96"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/ux/ai/AI.Action.Smart.js:53"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/ux/ai/AI.Action.Smart.js:105"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/ux/ai/AI.Layout.js:6"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/ux/Ux.Value.js:129"
        },
        {
            "message": "Missing item type\nUx.D.stString(table.columns,\n\"source\", \"provider\", \"consumer\",\n\"name\", \"category\"",
            "line": " src/app/control/ExamplePanel/UI.Markdown.js:62"
        },
        {
            "message": "Missing item type\n统一函数",
            "line": " src/app/function/shared/Fn.UI.js:96"
        },
        {
            "message": "Missing item type\nmock是组件内部state状态中开启mock专用\nmocker为组件内部的mocker初始化\n$mockData.mock为全局模拟数据的环境变量",
            "line": " src/economy/_internal/Ix.Fn.Mock.js:15"
        },
        {
            "message": "Missing item type\nDetail数据读取",
            "line": " src/economy/_internal/Ix.Fn.Mock.js:38"
        },
        {
            "message": "Missing item type\n抽屉主入口，用于帮助Zero UI专用调试工具入口",
            "line": " src/economy/debug/MonitorTool/UI.Tool.js:7"
        },
        {
            "message": "Missing item type\n二义性函数",
            "line": " src/economy/list/ComplexList/Op.Action.js:54"
        },
        {
            "message": "Missing item type\n添加只有一个，所以如果包含了添加的情况不处理key相关信息（即添加不计算)",
            "line": " src/economy/list/ComplexList/Op.Bar.js:127"
        },
        {
            "message": "Missing item type\n是否触发条件删除流程",
            "line": " src/economy/list/ComplexList/Op.Bar.js:139"
        },
        {
            "message": "Missing item type\nmock是组件内部state状态中开启mock专用\nmocker为组件内部的mocker初始化\n$mockData.mock为全局模拟数据的环境变量",
            "line": " src/economy/list/ComplexList/Op.Mock.js:15"
        },
        {
            "message": "Missing item type\nDetail数据读取",
            "line": " src/economy/list/ComplexList/Op.Mock.js:38"
        },
        {
            "message": "Missing item type\n解决多个Tab页状态不同步的问题\n1.只有Active的面板可以操作\n2.根据activeKey来执行界面切换，同时刷新子界面对应的$inited\n3.在关闭窗口的时候传入activeKey，需要关闭的是当前的窗口",
            "line": " src/economy/list/ComplexList/UI.Render.js:22"
        },
        {
            "message": "Missing item type\n计算初始化数据initData，",
            "line": " src/economy/list/DialogList/UI.js:59"
        },
        {
            "message": "Missing item type\n二义性函数",
            "line": " src/economy/list/TabList/Op.Action.js:54"
        },
        {
            "message": "Missing item type\n添加只有一个，所以如果包含了添加的情况不处理key相关信息（即添加不计算)",
            "line": " src/economy/list/TabList/Op.Bar.js:127"
        },
        {
            "message": "Missing item type\n解决多个Tab页状态不同步的问题\n1.只有Active的面板可以操作\n2.根据activeKey来执行界面切换，同时刷新子界面对应的$inited\n3.在关闭窗口的时候传入activeKey，需要关闭的是当前的窗口",
            "line": " src/economy/list/TabList/UI.Render.js:23"
        },
        {
            "message": "Missing item type\n基本要求：\nreference为父引用，和该组件绑定的资源文件必须包含：\n{\n     \"_topbar\":{\n         \"title\":\"标题文字\",\n         \"step\":{\n             \"active\":1,\n             \"items\":[\n             ]\n         }\n     }\n}",
            "line": " src/economy/page/HelpCard/UI.js:10"
        },
        {
            "message": "Missing item type\n基本要求：\nreference为父引用，和该组件绑定的资源文件必须包含：\n{\n     \"_topbar\":{\n         \"title\":\"标题文字\",\n         \"current\":1\n     }\n}\ncurrent需要配合外置的$extra一起使用\n$key用于解析配置文件\n$extra用于设置额外的附加工具栏",
            "line": " src/economy/page/PageCard/UI.js:10"
        },
        {
            "message": "Missing item type\n基本要求：\nreference为父引用，和该组件绑定的资源文件必须包含：\n{\n     \"_topbar\":{\n         \"title\":\"标题文字\",\n         \"current\":1\n     }\n}\ncurrent需要配合外置的$extra一起使用\n$key用于解析配置文件\n$extra用于设置额外的附加工具栏",
            "line": " src/economy/page/TitleCard/UI.js:5"
        },
        {
            "message": "Missing item type\n纯的Loading信息",
            "line": " src/ux/_backup/Ux.Ant.js:239"
        },
        {
            "message": "Missing item type\n计算当前提交的模式",
            "line": " src/ux/ai/AI.Action.Smart.js:10"
        },
        {
            "message": "Missing item type",
            "line": " src/ux/ai/AI.Action.Smart.js:53"
        },
        {
            "message": "Missing item type\nNormalize规范化数据信息（包括基于子列表的数据处理）",
            "line": " src/ux/ai/AI.Action.Smart.js:74"
        },
        {
            "message": "Missing item type\n特殊的二阶函数，用于生成标准的 (event) => {\n    （函数逻辑）\n}",
            "line": " src/ux/ai/AI.Action.Smart.js:105"
        },
        {
            "message": "Missing item type\n双参数格局\n1.不论哪种都调用过 event.preventDefault 函数；\n2.模式1：已经经历过Ant Design的提交流程\n     这种模式不可注入认证函数：fnValidate失效；\n     —— ambiguity 表示提交过后的表单值\n3.模式2：未经历过Ant Design的提交流程\n     这种模式可以注入认证函数：fnValidate失效；\n     —— ambiguity 表示原始Button中的 event 参数「调用过event.preventDefault()」\n     —— form 表单Ant Design中的form引用",
            "line": " src/ux/ai/AI.Action.Smart.js:122"
        },
        {
            "message": "Missing item type\n提取模式信息：\n1. 双添加模式：主记录Add、子列表Add\n2. 添加编辑模式：主记录Add、子列表Edit\n3. 编辑添加模式：主记录Edit、子列表Add\n4. 双编辑模式：主记录Edit、子列表Edit",
            "line": " src/ux/ai/AI.Action.Smart.js:135"
        },
        {
            "message": "Missing item type\n验证函数处理",
            "line": " src/ux/ai/AI.Action.Smart.js:143"
        },
        {
            "message": "Missing item type\n如果包含第二参，则直接调用form相关信息",
            "line": " src/ux/ai/AI.Action.Smart.js:148"
        },
        {
            "message": "Missing item type\n由于fnMock需要修改传入引用，为有副作用的函数\n所以直接从params拷贝数据，返回Mock后的数据信息",
            "line": " src/ux/ai/AI.Action.Smart.js:169"
        },
        {
            "message": "Missing item type\n第一参为验证之前的错误信息\n没有第二参",
            "line": " src/ux/ai/AI.Action.Smart.js:189"
        },
        {
            "message": "Missing item type\n连接相关数据信息，数据结构：\n{\n    majorKey：主记录key\n    1. 添加模式来自$addKey\n    2. 编辑模式来自$parent.key\n    data：子记录数据\n}",
            "line": " src/ux/ai/AI.Action.Smart.js:219"
        },
        {
            "message": "Missing item type\n顺序：field, optionItem.label, span, optionJsx.style.width, render, $KV$",
            "line": " src/ux/ai/AI.Expr.String.js:127"
        },
        {
            "message": "Missing item type\n如果是Object：只有metadata，然后包含各种options",
            "line": " src/ux/ai/AI.Expr.String.js:131"
        },
        {
            "message": "Missing item type\n顺序：name, icon, style",
            "line": " src/ux/ai/AI.Expr.String.js:182"
        },
        {
            "message": "Missing item type\n顺序：dataIndex, title, $render, sorter",
            "line": " src/ux/ai/AI.Expr.String.js:186"
        },
        {
            "message": "Missing item type\n顺序：key, label, style",
            "line": " src/ux/ai/AI.Expr.String.js:192"
        },
        {
            "message": "Missing item type\n顺序：title, key, icon, description, status",
            "line": " src/ux/ai/AI.Expr.String.js:214"
        },
        {
            "message": "Missing item type\n顺序：key, text, connectId, type, icon",
            "line": " src/ux/ai/AI.Expr.String.js:220"
        },
        {
            "message": "Missing item type\n全行布局，没有label相关属性，直接占满整行信息",
            "line": " src/ux/ai/AI.Layout.Calculator.js:81"
        },
        {
            "message": "Missing item type\nspan：当前组件所占宽度\ncolumns：当前行总列数\ncellIndex：当前组件所在的列索引",
            "line": " src/ux/ai/AI.Layout.Calculator.js:91"
        },
        {
            "message": "Missing item type\n直接渲染多行",
            "line": " src/ux/ai/AI.Layout.js:6"
        },
        {
            "message": "Missing item type\n过滤器处理",
            "line": " src/ux/ai/AI.RxAnt.Datum.js:63"
        },
        {
            "message": "Missing item type\n专写方法，更新list.items",
            "line": " src/ux/fun/Ux.Rdx.js:14"
        },
        {
            "message": "Missing item type\n第二参注定后续流程",
            "line": " src/ux/jsx/Ux.Jsx.Op.js:104"
        },
        {
            "message": "Missing item type\nAnt Form的提交专用按钮，其中会执行Ant Form的函数\nmetadata = {\n    text: 按钮上显示的文字\n    op: 按钮需要触发的绑定的key，从reference.state中提取\n    ...rest：其他的是按钮支持函数\n}",
            "line": " src/ux/jsx/Ux.Jsx.Op.js:121"
        },
        {
            "message": "Missing item type\n重定向专用链接按钮\nmetadata = {\n    text: 按钮上显示的文字\n    uri: 重定向的地址，包括/ima的前缀，环境变量中的设置\n}",
            "line": " src/ux/jsx/Ux.Jsx.Op.js:238"
        },
        {
            "message": "Missing item type\n渲染某一个单元格，主要用于处理上边的content",
            "line": " src/ux/jsx/Ux.Jsx.View.Fn.js:70"
        },
        {
            "message": "Missing item type\nphase = 1，开始打印\nphase = 2，字段打印\nphase = 3，打印结束",
            "line": " src/ux/monitor/Mt.Logger.js:241"
        },
        {
            "message": "Missing item type\n读取当前的view处理",
            "line": " src/ux/monitor/Mt.Writer.js:6"
        },
        {
            "message": "Missing item type\nTab页专用",
            "line": " src/ux/monitor/Mt.Writer.js:12"
        },
        {
            "message": "Missing item type\n记录专用",
            "line": " src/ux/monitor/Mt.Writer.js:20"
        },
        {
            "message": "Missing item type",
            "line": " src/ux/monitor/Mt.Writer.js:32"
        },
        {
            "message": "Missing item type\n链接某个ID的元素",
            "line": " src/ux/op/Ux.Connect.js:24"
        },
        {
            "message": "Missing item type\n链接Form初始化区分编辑和添加模式专用",
            "line": " src/ux/op/Ux.Pipe.js:7"
        },
        {
            "message": "Missing item type\n重置当前表单专用方法",
            "line": " src/ux/op/Ux.Pipe.js:55"
        },
        {
            "message": "Missing item type\n验证当前的items中是否包含了数据信息",
            "line": " src/ux/op/Ux.Pipe.js:71"
        },
        {
            "message": "Missing item type\n读取当前表格中的记录信息，填充表格相关信息专用",
            "line": " src/ux/prop/Ux.Item.js:3"
        },
        {
            "message": "Missing item type\n读取主记录的key信息：\n1. 添加模式读取主记录key：$addKey;\n2. 更新模式读取主记录key：$inited.key;",
            "line": " src/ux/prop/Ux.Item.js:11"
        },
        {
            "message": "Missing item type\n$addKey不会消失，这里主要考虑两点\n1. editKey有值（子表单编辑）\n2. $inited有值的情况（编辑模式）",
            "line": " src/ux/prop/Ux.Item.js:34"
        },
        {
            "message": "Missing item type\n读取Items专用方法，\n$items - 从list.items上读取的相关数据\n$parent - 包含了父记录数据，如果包含了则是（合并提交）",
            "line": " src/ux/prop/Ux.Item.js:54"
        },
        {
            "message": "Missing item type\nlist.items子列表专用方法，默认是Save模式",
            "line": " src/ux/prop/Ux.State.js:80"
        },
        {
            "message": "Missing item type\n创建不可变对象",
            "line": " src/ux/rx/Rx.Transfer.js:4"
        },
        {
            "message": "Missing item type\n专用ComplexList的错误检测函数",
            "line": " src/ux/terminal/Ux.Terminal.Verify.js:52"
        },
        {
            "message": "Missing item type\n线性变化：\nObject( key = Array ) => Array拉平",
            "line": " src/ux/value/Ux.Value.Math.js:39"
        },
        {
            "message": "Missing item type\n求和",
            "line": " src/ux/value/Ux.Value.Math.js:57"
        },
        {
            "message": "Missing item type",
            "line": " src/ux/Ux.Ajax.js:105"
        },
        {
            "message": "Missing item type\n构造微服务路径专用",
            "line": " src/ux/Ux.Ajax.js:238"
        },
        {
            "message": "Missing item type\n初始化专用方法",
            "line": " src/ux/Ux.Env.js:93"
        },
        {
            "message": "Missing item type\n初始化数据",
            "line": " src/ux/Ux.Env.js:109"
        },
        {
            "message": "Missing item type\n增强版的拷贝方法，支持多种模式",
            "line": " src/ux/Ux.Env.js:114"
        },
        {
            "message": "Missing item type\nwindow的合法值\n1：标准布局\n1/3：搜索栏专用值\n0.4：宽Label专用值",
            "line": " src/ux/Ux.Jsx.js:62"
        },
        {
            "message": "Missing item type\n登录页这种单列布局使用\n配置文件格式【一维数组】\n\"_form\":{\n    \"ui\":[\n        {\n        }\n    ]\n}",
            "line": " src/ux/Ux.Jsx.js:159"
        },
        {
            "message": "Missing item type\nGrid布局使用\n配置文件格式【二维数组】\n\"_form\":{\n    \"ui\":[\n        [\n             {\n             }\n        ]\n    ]\n}",
            "line": " src/ux/Ux.Jsx.js:172"
        },
        {
            "message": "Missing item type\n绑定Op专用，主要用于onClick的绑定操作",
            "line": " src/ux/Ux.Normalize.js:144"
        },
        {
            "message": "Missing item type\n数组连接Tabular/Assist专用算法",
            "line": " src/ux/Ux.Type.js:89"
        },
        {
            "message": "Missing item type\nmode = 0：调用原生的Object.assign：直接覆盖\nmode = 1：将source中的属性追加到target中，深度追加\nmode = 2：将source中的属性追加到target中，没有时追加",
            "line": " src/ux/Ux.Value.js:38"
        },
        {
            "message": "Missing item type\n二义性函数，传入的是string就执行parse处理",
            "line": " src/ux/Ux.Value.js:129"
        },
        {
            "message": "Missing item type\nUson - 数据结构\nUarr = 数据结构",
            "line": " src/ux/Ux.js:53"
        },
        {
            "message": "Missing item type\n触发控件专用",
            "line": " src/ux/Ux.js:58"
        },
        {
            "message": "Missing item type\nGlobal全局数据处理",
            "line": " src/ux/Ux.js:62"
        },
        {
            "message": "Missing item type\nAction Run专用,\n按钮Connect专用\nOn绑定专用\npipe 专用方法",
            "line": " src/ux/Ux.js:66"
        },
        {
            "message": "Missing item type\nrdx - 系列方法\nrt - Ajax响应处理专用方法\nir - 分页列表系列方法\nparse - 解析专用",
            "line": " src/ux/Ux.js:73"
        },
        {
            "message": "Missing item type\nAttribute：属性处理\nField：异步验证\nForm：Ant Design Form中的相关操作\nHoc：高阶组件专用方法\nState：状态处理\nProp：属性处理\nValidator：验证器处理",
            "line": " src/ux/Ux.js:80"
        },
        {
            "message": "Missing item type\nEncrypt：加密库\nFormat：Format格式化\nRandom：随机数生成\nSorter：列排序专用\nExpr：表达式格式化\nSign：签名处理\nHtml：专用Html属性处理\nIcon：图标处理",
            "line": " src/ux/Ux.js:90"
        }
    ]
}