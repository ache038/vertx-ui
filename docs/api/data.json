{
    "project": {
        "name": "Zero UI Doc",
        "url": "https://github.com/silentbalanceyh/vertx-ui.git",
        "description": "Zero UI前端文档工具",
        "version": "0.1.0"
    },
    "files": {
        "src/ux/Ux.Action.js": {
            "name": "src/ux/Ux.Action.js",
            "modules": {},
            "classes": {
                "Action": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.Ajax.js": {
            "name": "src/ux/Ux.Ajax.js",
            "modules": {},
            "classes": {
                "Ajax": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.Attribute.js": {
            "name": "src/ux/Ux.Attribute.js",
            "modules": {},
            "classes": {
                "Attribute": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.Column.js": {
            "name": "src/ux/Ux.Column.js",
            "modules": {},
            "classes": {
                "Column": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.Debug.js": {
            "name": "src/ux/Ux.Debug.js",
            "modules": {
                "Ux": 1
            },
            "classes": {
                "Debug": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.Depend.js": {
            "name": "src/ux/Ux.Depend.js",
            "modules": {},
            "classes": {
                "Depend": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.Dialog.js": {
            "name": "src/ux/Ux.Dialog.js",
            "modules": {},
            "classes": {
                "Dialog": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.Encrypt.js": {
            "name": "src/ux/Ux.Encrypt.js",
            "modules": {},
            "classes": {
                "Encrypt": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.Env.js": {
            "name": "src/ux/Ux.Env.js",
            "modules": {},
            "classes": {
                "Env": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.Expr.js": {
            "name": "src/ux/Ux.Expr.js",
            "modules": {},
            "classes": {
                "Expr": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.Field.js": {
            "name": "src/ux/Ux.Field.js",
            "modules": {},
            "classes": {
                "Field": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.Format.js": {
            "name": "src/ux/Ux.Format.js",
            "modules": {},
            "classes": {
                "Format": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.Global.js": {
            "name": "src/ux/Ux.Global.js",
            "modules": {},
            "classes": {
                "Global": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.Hoc.js": {
            "name": "src/ux/Ux.Hoc.js",
            "modules": {},
            "classes": {
                "Hoc": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.Html.js": {
            "name": "src/ux/Ux.Html.js",
            "modules": {},
            "classes": {
                "Html": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.Icon.js": {
            "name": "src/ux/Ux.Icon.js",
            "modules": {},
            "classes": {
                "Icon": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.Jsx.js": {
            "name": "src/ux/Ux.Jsx.js",
            "modules": {},
            "classes": {
                "Jsx": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.Log.js": {
            "name": "src/ux/Ux.Log.js",
            "modules": {},
            "classes": {
                "Log": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.Normalize.js": {
            "name": "src/ux/Ux.Normalize.js",
            "modules": {},
            "classes": {
                "Normalize": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.Op.js": {
            "name": "src/ux/Ux.Op.js",
            "modules": {},
            "classes": {
                "Op": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.Option.js": {
            "name": "src/ux/Ux.Option.js",
            "modules": {},
            "classes": {
                "Option": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.Param.js": {
            "name": "src/ux/Ux.Param.js",
            "modules": {},
            "classes": {
                "Param": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.Prop.js": {
            "name": "src/ux/Ux.Prop.js",
            "modules": {},
            "classes": {
                "Prop": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.Random.js": {
            "name": "src/ux/Ux.Random.js",
            "modules": {},
            "classes": {
                "Random": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.Redux.js": {
            "name": "src/ux/Ux.Redux.js",
            "modules": {},
            "classes": {
                "Redux": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.Sign.js": {
            "name": "src/ux/Ux.Sign.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.Sorter.js": {
            "name": "src/ux/Ux.Sorter.js",
            "modules": {},
            "classes": {
                "Sorter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.State.js": {
            "name": "src/ux/Ux.State.js",
            "modules": {},
            "classes": {
                "State": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.Store.js": {
            "name": "src/ux/Ux.Store.js",
            "modules": {},
            "classes": {
                "Store": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.Type.js": {
            "name": "src/ux/Ux.Type.js",
            "modules": {},
            "classes": {
                "Type": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.Validator.js": {
            "name": "src/ux/Ux.Validator.js",
            "modules": {},
            "classes": {
                "Validator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ux/Ux.Value.js": {
            "name": "src/ux/Ux.Value.js",
            "modules": {},
            "classes": {
                "Value": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Ux": {
            "name": "Ux",
            "submodules": {},
            "elements": {},
            "classes": {
                "Action": 1,
                "Ajax": 1,
                "Attribute": 1,
                "Column": 1,
                "Debug": 1,
                "Depend": 1,
                "Dialog": 1,
                "Encrypt": 1,
                "Env": 1,
                "Expr": 1,
                "Field": 1,
                "Format": 1,
                "Global": 1,
                "Hoc": 1,
                "Html": 1,
                "Icon": 1,
                "Jsx": 1,
                "Log": 1,
                "Normalize": 1,
                "Op": 1,
                "Option": 1,
                "Param": 1,
                "Prop": 1,
                "Random": 1,
                "Redux": 1,
                "Sorter": 1,
                "State": 1,
                "Store": 1,
                "Type": 1,
                "Validator": 1,
                "Value": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/ux/Ux.Value.js",
            "line": 142,
            "description": "1. `ensure`工具类：Zero UI内部专用断言工具类\n2. `dg`工具类：开发人员调试常用工具类"
        }
    },
    "classes": {
        "Action": {
            "name": "Action",
            "shortname": "Action",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "file": "src/ux/Ux.Action.js",
            "line": 59,
            "description": "通用Form操作相关方法"
        },
        "Ajax": {
            "name": "Ajax",
            "shortname": "Ajax",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "file": "src/ux/Ux.Ajax.js",
            "line": 217,
            "description": "远程Ajax访问专用API方法"
        },
        "Attribute": {
            "name": "Attribute",
            "shortname": "Attribute",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "file": "src/ux/Ux.Attribute.js",
            "line": 22,
            "description": "Jsx中的组件属性专用绑定"
        },
        "Column": {
            "name": "Column",
            "shortname": "Column",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "file": "src/ux/Ux.Column.js",
            "line": 290,
            "description": "Ant Design中的Table专用系列方法，暂时只有PageList在调用这三个函数，\n注意这里的columns必须是`Array`类型用于注入到Table组件"
        },
        "Debug": {
            "name": "Debug",
            "shortname": "Debug",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "namespace": "",
            "file": "src/ux/Ux.Debug.js",
            "line": 265,
            "description": "1. `ensure`工具类：Zero UI内部专用断言工具类\n2. `dg`工具类：开发人员调试常用工具类"
        },
        "Depend": {
            "name": "Depend",
            "shortname": "Depend",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "namespace": "",
            "file": "src/ux/Ux.Depend.js",
            "line": 38,
            "description": "用于处理关联字段专用的雷，一般处理带依赖的字段数据"
        },
        "Dialog": {
            "name": "Dialog",
            "shortname": "Dialog",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "namespace": "",
            "file": "src/ux/Ux.Dialog.js",
            "line": 95,
            "description": "窗口专用雷用于处理弹出窗口的开与关的信息"
        },
        "Encrypt": {
            "name": "Encrypt",
            "shortname": "Encrypt",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "namespace": "",
            "file": "src/ux/Ux.Encrypt.js",
            "line": 70,
            "description": "加密、编码、解码函数"
        },
        "Env": {
            "name": "Env",
            "shortname": "Env",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "namespace": "",
            "file": "src/ux/Ux.Env.js",
            "line": 63,
            "description": "环境变量专用类信息"
        },
        "Expr": {
            "name": "Expr",
            "shortname": "Expr",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "namespace": "",
            "file": "src/ux/Ux.Expr.js",
            "line": 85,
            "description": "字符串格式化专用函数"
        },
        "Field": {
            "name": "Field",
            "shortname": "Field",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "namespace": "",
            "file": "src/ux/Ux.Field.js",
            "line": 59,
            "description": "字段异步验证专用类"
        },
        "Format": {
            "name": "Format",
            "shortname": "Format",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "namespace": "",
            "file": "src/ux/Ux.Format.js",
            "line": 23,
            "description": "格式化专用函数"
        },
        "Global": {
            "name": "Global",
            "shortname": "Global",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "namespace": "",
            "file": "src/ux/Ux.Global.js",
            "line": 47,
            "description": "全局专用业务函数"
        },
        "Hoc": {
            "name": "Hoc",
            "shortname": "Hoc",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "namespace": "",
            "file": "src/ux/Ux.Hoc.js",
            "line": 139,
            "description": "专用Hoc解释器"
        },
        "Html": {
            "name": "Html",
            "shortname": "Html",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "namespace": "",
            "file": "src/ux/Ux.Html.js",
            "line": 63,
            "description": "原生Html元素连接类"
        },
        "Icon": {
            "name": "Icon",
            "shortname": "Icon",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "namespace": "",
            "file": "src/ux/Ux.Icon.js",
            "line": 20,
            "description": "图标处理"
        },
        "Jsx": {
            "name": "Jsx",
            "shortname": "Jsx",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "namespace": "",
            "file": "src/ux/Ux.Jsx.js",
            "line": 149,
            "description": "字段专用输出函数"
        },
        "Log": {
            "name": "Log",
            "shortname": "Log",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "namespace": "",
            "file": "src/ux/Ux.Log.js",
            "line": 224,
            "description": "日志专用类，支持不同组件的彩色日志"
        },
        "Normalize": {
            "name": "Normalize",
            "shortname": "Normalize",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "namespace": "",
            "file": "src/ux/Ux.Normalize.js",
            "line": 135,
            "description": "专用Form配置处理类，它的方法大部分都是内部使用"
        },
        "Op": {
            "name": "Op",
            "shortname": "Op",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "namespace": "",
            "file": "src/ux/Ux.Op.js",
            "line": 254,
            "description": "操作专用类"
        },
        "Option": {
            "name": "Option",
            "shortname": "Option",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "namespace": "",
            "file": "src/ux/Ux.Option.js",
            "line": 21,
            "description": "配置项专用静态处理类"
        },
        "Param": {
            "name": "Param",
            "shortname": "Param",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "namespace": "",
            "file": "src/ux/Ux.Param.js",
            "line": 136,
            "description": "复杂参数解析器"
        },
        "Prop": {
            "name": "Prop",
            "shortname": "Prop",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "namespace": "",
            "file": "src/ux/Ux.Prop.js",
            "line": 151,
            "description": "属性专用处理器"
        },
        "Random": {
            "name": "Random",
            "shortname": "Random",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "namespace": "",
            "file": "src/ux/Ux.Random.js",
            "line": 16,
            "description": "专用随机类"
        },
        "Redux": {
            "name": "Redux",
            "shortname": "Redux",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "namespace": "",
            "file": "src/ux/Ux.Redux.js",
            "line": 28,
            "description": "专用State状态树中的读取器"
        },
        "Sorter": {
            "name": "Sorter",
            "shortname": "Sorter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "namespace": "",
            "file": "src/ux/Ux.Sorter.js",
            "line": 18,
            "description": "Table组件排序专用函数，对应列中的sorter"
        },
        "State": {
            "name": "State",
            "shortname": "State",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "namespace": "",
            "file": "src/ux/Ux.State.js",
            "line": 17,
            "description": "回写状态树专用方法"
        },
        "Store": {
            "name": "Store",
            "shortname": "Store",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "namespace": "",
            "file": "src/ux/Ux.Store.js",
            "line": 63,
            "description": "访问Session/Local的Storage专用"
        },
        "Type": {
            "name": "Type",
            "shortname": "Type",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "namespace": "",
            "file": "src/ux/Ux.Type.js",
            "line": 200,
            "description": "复杂数据结构计算"
        },
        "Validator": {
            "name": "Validator",
            "shortname": "Validator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "namespace": "",
            "file": "src/ux/Ux.Validator.js",
            "line": 124,
            "description": "Ant Design验证规则横切注入专用"
        },
        "Value": {
            "name": "Value",
            "shortname": "Value",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Ux",
            "namespace": "",
            "file": "src/ux/Ux.Value.js",
            "line": 142,
            "description": "数值计算器"
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "src/ux/Ux.Action.js",
            "line": 5,
            "description": "Form专用提交方法，统一提交流程，reference的props属性中包含两个特殊属性\n1. form变量为Ant Design的Form创建的引用；\n2. $key变量标识Form的提交模式：$key = undefined则是添加模式；",
            "itemtype": "method",
            "name": "runSubmit",
            "params": [
                {
                    "name": "reference",
                    "description": "React专用组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "fnSuccess",
                    "description": "提交成功过后的回调函数",
                    "type": "Function"
                },
                {
                    "name": "fnFailure",
                    "description": "如果验证出现错误后的回调函数",
                    "type": "Function"
                }
            ],
            "example": [
                "\n\n    // Form提交专用流程\n    Ux.runSubmit(reference, data => {\n         const {$hotel} = reference.props;\n         if ($hotel && $hotel.is()) {\n             // 填充默认的酒店ID和Sigma相关值\n             data.hotelId = $hotel._(\"key\");\n             data.sigma = $hotel._(\"sigma\");\n             if (fnSubmit) {\n                 fnSubmit(data);\n             }\n         }\n    });"
            ],
            "class": "Action"
        },
        {
            "file": "src/ux/Ux.Ajax.js",
            "line": 9,
            "description": "Ajax远程访问过程中的Uri处理器",
            "itemtype": "method",
            "name": "ajaxUri",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "uri",
                    "description": "传入的原始路径，如：/api/app/:name",
                    "type": "String"
                },
                {
                    "name": "method",
                    "description": "传入的HTTP方法，默认为get",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "当前请求的参数数据",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Ajax"
        },
        {
            "file": "src/ux/Ux.Ajax.js",
            "line": 30,
            "description": "Ajax远程访问过程中的Header处理器",
            "itemtype": "method",
            "name": "ajaxHeader",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "secure",
                    "description": "是否为安全模式？安全模式会添加Authorization头。",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Headers"
            },
            "class": "Ajax"
        },
        {
            "file": "src/ux/Ux.Ajax.js",
            "line": 49,
            "description": "Ajax中的特殊参数处理器，如果包含了$body字段值，则将该值当做可处理的参数处理，\n该方法参数主要用于处理带路径参数的POST/PUT方法同时使用的场景",
            "itemtype": "method",
            "name": "ajaxParams",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "params",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "example": [
                "\n\n     // PUT和POST的处理\n     Ux.ajaxPost(\"/api/and/tabulars/sigma/:sigma\", {\n         sigma : hotel.sigma,\n         $body : [\n             \"room.clean.status\",\n             \"room.status\",\n             \"room.op.status\"\n         ]\n     }),"
            ],
            "class": "Ajax"
        },
        {
            "file": "src/ux/Ux.Ajax.js",
            "line": 75,
            "description": "Ajax中的响应处理器，Promise调用返回过后的响应专用处理器",
            "itemtype": "method",
            "name": "ajaxResponse",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "request",
                    "description": "请求对象",
                    "type": "Request"
                },
                {
                    "name": "mockData",
                    "description": "【Mock环境可用】专用Mock响应处理",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<Response>"
            },
            "class": "Ajax"
        },
        {
            "file": "src/ux/Ux.Ajax.js",
            "line": 99,
            "description": "【高阶函数：二阶】Ajax统一调用的读取方法，生成统一的Ajax远程读取方法",
            "itemtype": "method",
            "name": "ajaxRead",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "method",
                    "description": "HTTP方法"
                },
                {
                    "name": "secure",
                    "description": "是否安全模式"
                }
            ],
            "class": "Ajax"
        },
        {
            "file": "src/ux/Ux.Ajax.js",
            "line": 116,
            "description": "【高阶函数：二阶】Ajax统一调用的读写双用方法，生成统一的Ajax远程调用方法，ajaxRead + ajaxWrite方法",
            "itemtype": "method",
            "name": "ajaxFull",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "method",
                    "description": "HTTP方法"
                },
                {
                    "name": "secure",
                    "description": "是否安全模式"
                }
            ],
            "class": "Ajax"
        },
        {
            "file": "src/ux/Ux.Ajax.js",
            "line": 135,
            "description": "Ajax日志函数，打印请求过程中的日志信息",
            "itemtype": "method",
            "name": "_logAjax",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "api",
                    "description": "当前Ajax请求的Uri路径"
                },
                {
                    "name": "method",
                    "description": "当前Ajax使用的HTTP方法"
                },
                {
                    "name": "params",
                    "description": "当前Ajax请求的参数信息"
                },
                {
                    "name": "mockData",
                    "description": "【Mock环境可用】当前Ajax请求的Mock数据"
                }
            ],
            "class": "Ajax"
        },
        {
            "file": "src/ux/Ux.Ajax.js",
            "line": 151,
            "description": "【高阶函数：二阶】Ajax统一调用的读取方法，生成统一的Ajax远程写数据方法",
            "itemtype": "method",
            "name": "ajaxWrite",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "method",
                    "description": "HTTP方法"
                },
                {
                    "name": "secure",
                    "description": "是否安全模式"
                }
            ],
            "class": "Ajax"
        },
        {
            "file": "src/ux/Ux.Ajax.js",
            "line": 170,
            "description": "统一处理Epic，引入Mock的RxJs处理远程访问",
            "itemtype": "method",
            "name": "rxEpic",
            "params": [
                {
                    "name": "type",
                    "description": "redux-act创建出来的Redux Action"
                },
                {
                    "name": "promise",
                    "description": "构造的Promise"
                },
                {
                    "name": "processor",
                    "description": "响应数据处理器，可用于处理response中的数据"
                },
                {
                    "name": "mockData",
                    "description": "【Mock环境可用】模拟数据"
                },
                {
                    "name": "mockProcessor",
                    "description": "【Mock环境可用】Mock环境的特殊处理器"
                }
            ],
            "example": [
                "\n\n     // Act.Epic.js中的专用方法\n     fnFetchRoomType : $action => Ux.rxEpic(\n         $action.ofType(Types.fnFetchRoomType.getType()),\n         hotel => Ux.ajaxGet(\"/api/room-types/hotel/:hid\", {\n             hid : hotel.key\n         }),\n         data => Ux.rxAssist(data, \"room.type\"),\n         Mock.fnFetchRoomType\n     )"
            ],
            "class": "Ajax"
        },
        {
            "file": "src/ux/Ux.Ajax.js",
            "line": 223,
            "description": "secure = false，非安全模式的读取方法，HttpMethod = GET，底层调ajaxRead",
            "itemtype": "method",
            "name": "ajaxFetch",
            "params": [
                {
                    "name": "uri",
                    "description": "该Ajax调用的Uri路径"
                },
                {
                    "name": "params",
                    "description": "请求参数"
                },
                {
                    "name": "mockData",
                    "description": "【Mock环境可用】模拟数据"
                }
            ],
            "class": "Ajax"
        },
        {
            "file": "src/ux/Ux.Ajax.js",
            "line": 232,
            "description": "secure = false，非安全模式的写方法，HttpMethod = POST，底层调ajaxWrite",
            "itemtype": "method",
            "name": "ajaxPush",
            "params": [
                {
                    "name": "uri",
                    "description": "该Ajax调用的Uri路径"
                },
                {
                    "name": "params",
                    "description": "请求参数"
                },
                {
                    "name": "mockData",
                    "description": "【Mock环境可用】模拟数据"
                }
            ],
            "class": "Ajax"
        },
        {
            "file": "src/ux/Ux.Ajax.js",
            "line": 241,
            "description": "secure = true，安全模式的读取方法，HttpMethod = GET，底层调ajaxRead",
            "itemtype": "method",
            "name": "ajaxGet",
            "params": [
                {
                    "name": "uri",
                    "description": "该Ajax调用的Uri路径"
                },
                {
                    "name": "params",
                    "description": "请求参数"
                },
                {
                    "name": "mockData",
                    "description": "【Mock环境可用】模拟数据"
                }
            ],
            "class": "Ajax"
        },
        {
            "file": "src/ux/Ux.Ajax.js",
            "line": 250,
            "description": "secure = true，安全模式的写方法，HttpMethod = POST，底层调ajaxFull",
            "itemtype": "method",
            "name": "ajaxPost",
            "params": [
                {
                    "name": "uri",
                    "description": "该Ajax调用的Uri路径"
                },
                {
                    "name": "params",
                    "description": "请求参数"
                },
                {
                    "name": "mockData",
                    "description": "【Mock环境可用】模拟数据"
                }
            ],
            "class": "Ajax"
        },
        {
            "file": "src/ux/Ux.Ajax.js",
            "line": 259,
            "description": "secure = true，安全模式的写方法，HttpMethod = PUT，底层调ajaxFull",
            "itemtype": "method",
            "name": "ajaxPut",
            "params": [
                {
                    "name": "uri",
                    "description": "该Ajax调用的Uri路径"
                },
                {
                    "name": "params",
                    "description": "请求参数"
                },
                {
                    "name": "mockData",
                    "description": "【Mock环境可用】模拟数据"
                }
            ],
            "class": "Ajax"
        },
        {
            "file": "src/ux/Ux.Ajax.js",
            "line": 268,
            "description": "secure = true，安全模式的写方法，HttpMethod = DELETE，底层调ajaxFull",
            "itemtype": "method",
            "name": "ajaxDelete",
            "params": [
                {
                    "name": "uri",
                    "description": "该Ajax调用的Uri路径"
                },
                {
                    "name": "params",
                    "description": "请求参数"
                },
                {
                    "name": "mockData",
                    "description": "【Mock环境可用】模拟数据"
                }
            ],
            "class": "Ajax"
        },
        {
            "file": "src/ux/Ux.Attribute.js",
            "line": 3,
            "description": "设置Ant Design中组件的属性：\n* DatePicker组件设置`disabledDate`属性；",
            "itemtype": "method",
            "name": "propFromNow",
            "params": [
                {
                    "name": "current",
                    "description": "当前组件的输入值"
                }
            ],
            "example": [
                "\n\n     // 设置disabledDate专用属性\n     arriveTime: (reference, jsx = {}) => {\n         jsx.disabledDate = Ux.propFromNow;\n         jsx.onChange = Op.dependByArriveTime(reference);\n         return (\n             <DatePicker {...jsx} />\n         )\n     },"
            ],
            "class": "Attribute"
        },
        {
            "file": "src/ux/Ux.Column.js",
            "line": 6,
            "description": "【高阶函数：二阶】列render方法处理器，用于处理双值\n* 配置键：LOGICAL\n* true/false对应不同的双值，以及不同值呈现值\n* 附加配置项中包含$mapping用于描述双值配置",
            "itemtype": "method",
            "name": "renderLogical",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "config",
                    "description": "单列配置数据",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Function(*): *"
            },
            "example": [
                "\n\n     ...\n     {\n         \"title\": \"房包早\",\n         \"dataIndex\": \"brekker\",\n         \"$render\": \"LOGICAL\",\n         \"$mapping\": {\n             \"true\": \"是\",\n             \"false\": \"否\"\n         }\n     }"
            ],
            "class": "Column"
        },
        {
            "file": "src/ux/Ux.Column.js",
            "line": 34,
            "description": "【高阶函数：二阶】列render方法处理器，用于处理带百分号（%）的字符串格式化\n* 配置值：PERCENT",
            "itemtype": "method",
            "name": "renderPercent",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "config",
                    "description": "单列配置数据",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Function(*=): *"
            },
            "class": "Column"
        },
        {
            "file": "src/ux/Ux.Column.js",
            "line": 48,
            "description": "【高阶函数：二阶】列render方法处理器，用于处理时间格式化\n* 配置值：DATE\n* 附加配置中包含$format用于描述moment的格式Pattern",
            "itemtype": "method",
            "name": "renderDate",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "config",
                    "description": "单列配置数据",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Function(*=): *"
            },
            "example": [
                "\n\n     ...\n     {\n         \"title\": \"抵达日期\",\n         \"dataIndex\": \"arriveTime\",\n         \"$render\": \"DATE\",\n         \"$format\": \"YYYY年MM月DD日 HH:mm:ss\"\n     }"
            ],
            "class": "Column"
        },
        {
            "file": "src/ux/Ux.Column.js",
            "line": 70,
            "description": "【高阶函数：二阶】列render方法处理器，用于处理货币格式化\n* 配置值：CURRENCY\n* 附加配置中包含$flag用于描述货币符号，默认为￥",
            "itemtype": "method",
            "name": "renderCurrency",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "config",
                    "description": "单列配置数据",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Function(*=): *"
            },
            "example": [
                "\n\n     ...\n     {\n         \"title\": \"单价\",\n         \"dataIndex\": \"unitPrice\",\n         \"$render\": \"CURRENCY\"\n     },"
            ],
            "class": "Column"
        },
        {
            "file": "src/ux/Ux.Column.js",
            "line": 92,
            "description": "【高阶函数：二阶】列render方法处理函数，用于处理表达式格式化\n* 配置项：EXPRESSION\n* 附加配置$expr用于描述表达式，表达式中的占位符使用`:value`的格式",
            "itemtype": "method",
            "name": "renderExpression",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "config",
                    "description": "单列配置数据",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Function(*=): *"
            },
            "example": [
                "\n\n     ...\n     {\n         \"title\": \"入住天数\",\n         \"dataIndex\": \"insideDays\",\n         \"$render\": \"EXPRESSION\",\n         \"$expr\": \":value天\"\n     }"
            ],
            "class": "Column"
        },
        {
            "file": "src/ux/Ux.Column.js",
            "line": 114,
            "description": "【高阶函数：二阶】列render方法处理函数，用于处理Datum类型：Tabular/Assist专用格式化\n* 配置项：DATUM\n* 附加配置项：$datum用于描述关联的信息，source = key, value和display对应值和呈现字段",
            "itemtype": "method",
            "name": "renderDatum",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "config",
                    "description": "单列配置数据",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Function(*=): *"
            },
            "example": [
                "\n\n     ...\n     {\n         \"title\": \"会计科目\",\n         \"dataIndex\": \"accountId\",\n         \"$render\": \"DATUM\",\n         \"$datum\": {\n             \"source\": \"account.item\",\n             \"value\": \"category\",\n             \"display\": \"name\"\n         }\n     }"
            ],
            "class": "Column"
        },
        {
            "file": "src/ux/Ux.Column.js",
            "line": 143,
            "description": "【高阶函数：二阶】列render方法处理函数，用于处理Link类型：带操作的链接类型\n* 配置值：LINK\n* 附加配置想对复杂，用于处理操作链接，数组$config用于描述当前操作按钮\n     * 如果是divider的字符串则直接渲染分隔符（无操作）；\n     * 如果包含了dialogKey则表示当前按钮触发过后会显示dialog窗口；\n     * 如果包含了confirm，则会启用提示操作；\n     * 如果包含onClick则使用onClick生成确认函数，关联到Dialog中的Yes；如果包含confirm，则confirm就是窗口函数，onConfirm充当不带confirm时的onClick二阶函数；",
            "itemtype": "method",
            "name": "renderLink",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "config",
                    "description": "单列配置数据",
                    "type": "Object"
                },
                {
                    "name": "ops",
                    "description": "可传入的二阶函数，用于生成新的Click函数"
                }
            ],
            "return": {
                "description": "",
                "type": "Function(*=): *"
            },
            "example": [
                "\n\n     ...\n     {\n         \"title\": \"操作\",\n         \"dataIndex\": \"key\",\n         \"fixed\": \"left\",\n         \"$render\": \"LINK\",\n         \"$config\": [\n             {\n                 \"key\": \"btnEdit\",\n                 \"text\": \"编辑\",\n                 \"dialogKey\": \"dgEdit\",\n                 \"onClick\": \"fnEdit\"\n             },\n             \"divider\",\n             {\n                 \"key\": \"btnDelete\",\n                 \"text\": \"删除\",\n                 \"dataPath\": \"list.items\",\n                 \"confirm\": {\n                     \"title\": \"确认删除当前入住人？\",\n                     \"okText\": \"是\",\n                     \"cancelText\": \"否\",\n                     \"onConfirm\": \"fnRemove\"\n                 }\n             }\n         ]\n     }"
            ],
            "class": "Column"
        },
        {
            "file": "src/ux/Ux.Column.js",
            "line": 234,
            "description": "Ant Design的Table组件的Table组件专用属性`columns`列处理器，处理每一列的`render`属性",
            "itemtype": "method",
            "name": "uiTableColumn",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "columns",
                    "description": "当前Table组件的columns配置",
                    "type": "Array"
                },
                {
                    "name": "ops",
                    "description": "当前列是否可操作列：如列中包含了编辑、删除按钮"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Column"
        },
        {
            "file": "src/ux/Ux.Column.js",
            "line": 253,
            "description": "Ant Design中的Table组件的Table组件专用属性`pagination`处理",
            "itemtype": "method",
            "name": "uiTablePager",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "pager",
                    "description": "分页对象，包含了`size`和`page`两个属性",
                    "type": "Object"
                },
                {
                    "name": "count",
                    "description": "当前分页组件的数据中的记录数",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Column"
        },
        {
            "file": "src/ux/Ux.Column.js",
            "line": 271,
            "description": "【高阶函数：二阶】Ant Design中的Table组件专用属性`rowSelection`生成函数",
            "itemtype": "method",
            "name": "uiTableSelection",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Column"
        },
        {
            "file": "src/ux/Ux.Debug.js",
            "line": 5,
            "description": "检查传入对象object是否包含了field字段值\n* 1.传入的object不可以是undefined。\n* 2.传入的field不可以是undefined。\n* 3.object必须包含field，才不会有错误信息输出。",
            "itemtype": "method",
            "name": "ensureArgs",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "object",
                    "description": "被检查的JavaScript对象"
                },
                {
                    "name": "field",
                    "description": "被检查的字段名称",
                    "type": "String"
                }
            ],
            "example": [
                "\n\n     // 导入Debug子类\n     import Dg from './Ux.Debug';\n     // 省略中间代码\n     const reference = ...;\n     Dg.ensureArgs(reference, \"foo\");"
            ],
            "class": "Debug"
        },
        {
            "file": "src/ux/Ux.Debug.js",
            "line": 27,
            "description": "检查传入的input是否合法\n* 合法条件：不为null、不为undefined、不为JavaScript的if检查条件中的false",
            "itemtype": "method",
            "name": "ensureNotNull",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "input",
                    "description": ""
                }
            ],
            "class": "Debug"
        },
        {
            "file": "src/ux/Ux.Debug.js",
            "line": 39,
            "description": "检查传入的React中用的Component组件是否合法\n* 合法条件：不为null、不为undefined、不为JavaScript的if检查条件中的false",
            "itemtype": "method",
            "name": "ensureRuntime",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "reference",
                    "description": "React中Component组件引用",
                    "type": "ReactComponent"
                }
            ],
            "class": "Debug"
        },
        {
            "file": "src/ux/Ux.Debug.js",
            "line": 51,
            "description": "检查函数中的第二特殊参数`effectKey`是否合法\n* 合法条件：不为null、不为undefined、不为JavaScript的if检查条件中的false",
            "itemtype": "method",
            "name": "ensureAttr",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "funName",
                    "description": "待检查的函数名",
                    "type": "Function"
                },
                {
                    "name": "key",
                    "description": "待检查的第二参的值",
                    "type": "String"
                }
            ],
            "class": "Debug"
        },
        {
            "file": "src/ux/Ux.Debug.js",
            "line": 64,
            "description": "检查发送安全请求时的token是否合法\n* 合法条件：不为null、不为undefined、不为JavaScript的if检查条件中的false",
            "itemtype": "method",
            "name": "ensureToken",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "token",
                    "description": "请求中收到的token的值",
                    "type": "String"
                }
            ],
            "class": "Debug"
        },
        {
            "file": "src/ux/Ux.Debug.js",
            "line": 76,
            "description": "检查函数调用过程中的参数key是否合法（一般用于高阶检查）\n* 合法条件：不为null、不为undefined、不为JavaScript的if检查条件中的false",
            "itemtype": "method",
            "name": "ensureKey",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "funName",
                    "description": "待检查的函数名",
                    "type": "Function"
                },
                {
                    "name": "key",
                    "description": "待检查的键值key",
                    "type": "String"
                }
            ],
            "class": "Debug"
        },
        {
            "file": "src/ux/Ux.Debug.js",
            "line": 89,
            "description": "Application应用专用配置检查，判断当前应用配置是否初始化\n* 合法条件：不为null、不为undefined、不为JavaScript的if检查条件中的false",
            "itemtype": "method",
            "name": "ensureApp",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "app",
                    "description": "应用程序配置",
                    "type": "Object"
                }
            ],
            "class": "Debug"
        },
        {
            "file": "src/ux/Ux.Debug.js",
            "line": 101,
            "description": "React Component中的render相关专用检查（是否合法）",
            "itemtype": "method",
            "name": "ensureRender",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "render",
                    "description": "函数应用",
                    "type": "Function"
                },
                {
                    "name": "option",
                    "description": "render过程中的配置",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\n     // 使用JSX渲染某个字段\n     const jsxField = (reference, item = {}, render) => {\n         Dg.ensureRender(render, item);\n         // ...\n     }"
            ],
            "class": "Debug"
        },
        {
            "file": "src/ux/Ux.Debug.js",
            "line": 120,
            "description": "调用传入函数检查数据类型，如果类型不对则抛出异常",
            "itemtype": "method",
            "name": "ensureType",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": ""
                },
                {
                    "name": "fun",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "flag",
                    "description": "期望类型",
                    "type": "String"
                }
            ],
            "example": [
                "\n\n     // 查找数组中的唯一元素\n     const elementUnique = (data = [], field = \"\", value) => {\n         Dg.ensureType(data, U.isArray, \"Array\");\n         //\n     }"
            ],
            "class": "Debug"
        },
        {
            "file": "src/ux/Ux.Debug.js",
            "line": 140,
            "description": "检查数组的长度是否大于上限长度",
            "itemtype": "method",
            "name": "ensureLength",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "array",
                    "description": "被检查的数组",
                    "type": "Array"
                },
                {
                    "name": "upLimit",
                    "description": "数组上限长度值",
                    "type": "Number"
                }
            ],
            "class": "Debug"
        },
        {
            "file": "src/ux/Ux.Debug.js",
            "line": 155,
            "description": "检查当前传入值是否是一个合法的Number",
            "itemtype": "method",
            "name": "ensureNumber",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": "传入的数值"
                }
            ],
            "class": "Debug"
        },
        {
            "file": "src/ux/Ux.Debug.js",
            "line": 166,
            "description": "检查当前传入的值是否是一个正数的Number",
            "itemtype": "method",
            "name": "ensurePositive",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "class": "Debug"
        },
        {
            "file": "src/ux/Ux.Debug.js",
            "line": 178,
            "description": "将传入的值`data`下载成一个文件保存，文件名系统生成，该文件名被转换过，所以调用时使用Ux调用",
            "itemtype": "method",
            "name": "dgFileJson",
            "params": [
                {
                    "name": "data",
                    "description": "传入的数据",
                    "type": "Object|Array"
                },
                {
                    "name": "ext",
                    "description": "保存的文件格式后缀名，默认为.json"
                }
            ],
            "example": [
                "\n\n     // 设置文件中将保存的数据\n     const data = {\n         username:\"Lang\",\n         password:\"Lang\"\n     };\n     Ux.dgFileJson(data);"
            ],
            "class": "Debug"
        },
        {
            "file": "src/ux/Ux.Debug.js",
            "line": 201,
            "description": "【Development Only】\n在调试模式才启用的Form专用打印信息，打印Form初始化过程中的表单数据\n支持两种模式：updated = true为更新Form时的数据，updated = false则是添加时的数据",
            "itemtype": "method",
            "name": "dgForm",
            "params": [
                {
                    "name": "reference",
                    "description": "包含了form变量的React的组件Component引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "data",
                    "description": "当前Form中的表单数据"
                },
                {
                    "name": "updated",
                    "description": "判断当前调试使用的是更新/添加模式"
                }
            ],
            "class": "Debug"
        },
        {
            "file": "src/ux/Ux.Debug.js",
            "line": 218,
            "description": "【Development Only】\nUx包的报表专用调试方法，整个应用中只有一处调用该方法",
            "itemtype": "method",
            "name": "dgScript",
            "params": [
                {
                    "name": "ux",
                    "description": "Ux引用"
                }
            ],
            "class": "Debug"
        },
        {
            "file": "src/ux/Ux.Debug.js",
            "line": 235,
            "description": "【Development Only】\n自动生成路由中的路由报表，可查看所有的路由信息",
            "itemtype": "method",
            "name": "dgRouter",
            "params": [
                {
                    "name": "ux",
                    "description": "Ux引用"
                },
                {
                    "name": "container",
                    "description": "Layout模板配置信息"
                },
                {
                    "name": "component",
                    "description": "Page组件配置信息"
                }
            ],
            "class": "Debug"
        },
        {
            "file": "src/ux/Ux.Debug.js",
            "line": 252,
            "description": "【Development Only】\nRxjs专用调试打印方法，执行过后返回data",
            "itemtype": "method",
            "name": "dgMonitor",
            "params": [
                {
                    "name": "data",
                    "description": "传入需要打印的数据信息"
                }
            ],
            "return": {
                "description": "返回传入的数据"
            },
            "class": "Debug"
        },
        {
            "file": "src/ux/Ux.Depend.js",
            "line": 3,
            "description": "处理关联字段的只读数据信息，该reference必须是Ant Design中的Form相关值",
            "itemtype": "method",
            "name": "dependReadOnlyDatum",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "sourceKey",
                    "description": "该sourceKey对应：Tabular/Assist专用的key值信息"
                },
                {
                    "name": "filterFun",
                    "description": "针对数据源处理的filter过滤函数信息，该过滤函数可将sourceKey结果Array处理掉"
                },
                {
                    "name": "formField",
                    "description": "依赖的Form中的字段值"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "example": [
                "\n\n     ...\n     surety: (reference, jsx = {}) => {\n         jsx.readOnly = Ux.dependReadOnlyDatum(\n             reference,\n             \"surety.type\",\n             item => {\n                 return \"None\" === item.code;\n             },\n             \"suretyType\"\n         );\n         // 是否删除placeholder\n         if (jsx.readOnly) {\n             delete jsx.placeholder;\n         }\n         return (<Input {...jsx} />)\n     },"
            ],
            "class": "Depend",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Dialog.js",
            "line": 26,
            "description": "错误信息显示窗口",
            "itemtype": "method",
            "name": "showError",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "message",
                    "description": "直接呈现的消息"
                },
                {
                    "name": "fnSuccess",
                    "description": "窗口按钮的回调函数",
                    "type": "Function"
                }
            ],
            "class": "Dialog",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Dialog.js",
            "line": 34,
            "description": "成功信息显示专用窗口",
            "itemtype": "method",
            "name": "showSuccess",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "message",
                    "description": "直接呈现的消息"
                },
                {
                    "name": "fnSuccess",
                    "description": "窗口按钮的回调函数",
                    "type": "Function"
                }
            ],
            "class": "Dialog",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Dialog.js",
            "line": 47,
            "description": "显示窗口专用函数，该函数用于根据资源文件中的配置信息显示窗口，资源文件必须包含`_modal`或`modal`节点；\n* key用于从`modal`配置中提取窗口信息",
            "itemtype": "method",
            "name": "showDialog",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "key",
                    "description": "提取配置的key值",
                    "type": "String"
                },
                {
                    "name": "fnSuccess",
                    "description": "窗口按钮的回调函数",
                    "type": "Function"
                },
                {
                    "name": "params",
                    "description": "传入参数，用于处理message专用",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\n     ...\n     \"_modal\": {\n         \"type\": \"success\",\n         \"message\": {\n             \"add\": \"您的账单项目添加成功！\",\n             \"edit\": \"您的账单项目保存成功！\"\n         }\n     }"
            ],
            "class": "Dialog",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Dialog.js",
            "line": 75,
            "description": "显示窗口专用函数，直接和React的组件联合使用\n* `fnShow`函数必须存在于reference.props",
            "itemtype": "method",
            "name": "fadeIn",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                }
            ],
            "class": "Dialog",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Dialog.js",
            "line": 85,
            "description": "隐藏窗口专用函数，直接和React的组件联合使用\n* `fnHide`函数必须存在于reference.props",
            "itemtype": "method",
            "name": "fadeOut",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                }
            ],
            "class": "Dialog",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Encrypt.js",
            "line": 20,
            "description": "MD5加密函数，针对value进行MD5加密（全大小）",
            "itemtype": "method",
            "name": "encryptMD5",
            "params": [
                {
                    "name": "value",
                    "description": "被加密字符串"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Encrypt",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Encrypt.js",
            "line": 33,
            "description": "Base64编码函数，针对value进行Base64编码",
            "itemtype": "method",
            "name": "encryptBase64",
            "params": [
                {
                    "name": "value",
                    "description": "被编码字符串"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Encrypt",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Encrypt.js",
            "line": 42,
            "description": "Base64解码函数，针对value进行Base64解码",
            "itemtype": "method",
            "name": "decryptBase64",
            "params": [
                {
                    "name": "value",
                    "description": "被解码字符串"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Encrypt",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Encrypt.js",
            "line": 51,
            "description": "数字签名专用Hmac512算法加密，针对value和secret一起进行Hmac512数字签名加密",
            "itemtype": "method",
            "name": "encryptHmac512",
            "params": [
                {
                    "name": "value",
                    "description": "被签名字符串"
                },
                {
                    "name": "secret",
                    "description": "随机密钥"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Encrypt",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Env.js",
            "line": 9,
            "description": "自动生成路由专用函数",
            "itemtype": "method",
            "name": "route",
            "params": [
                {
                    "name": "container",
                    "description": "生成路由的Layout组件"
                },
                {
                    "name": "components",
                    "description": "生成路由的Page组件"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Env",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Env.js",
            "line": 134,
            "description": "Redux专用状态树的写入方法",
            "itemtype": "method",
            "name": "dataOut",
            "params": [
                {
                    "name": "data",
                    "description": "被写入的数据"
                }
            ],
            "class": "Env",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Env.js",
            "line": 140,
            "description": "Redux专用状态树的读取方法",
            "itemtype": "method",
            "name": "dataIn",
            "params": [
                {
                    "name": "state",
                    "description": "Redux读取到的状态"
                }
            ],
            "class": "Env",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Env.js",
            "line": 151,
            "description": "Redux中的Action专用创建函数",
            "itemtype": "method",
            "name": "createAction",
            "params": [
                {
                    "name": "path",
                    "description": "创建的Action对应的路径"
                }
            ],
            "class": "Env",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Env.js",
            "line": 158,
            "description": "专用zero的注解",
            "itemtype": "method",
            "name": "zero",
            "class": "Env",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Expr.js",
            "line": 32,
            "description": "格式化字符串，将:x，:y使用params进行参数替换\n比如：/api/test/:name和{name:\"lang\"}两个合并成 => /api/test/lang",
            "itemtype": "method",
            "name": "formatExpr",
            "params": [
                {
                    "name": "input",
                    "description": "原始字符串",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "传入参数",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Expr",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Expr.js",
            "line": 52,
            "description": "将参数追加到Query String中生成完整的uri链接。",
            "itemtype": "method",
            "name": "formatQuery",
            "params": [
                {
                    "name": "uri",
                    "description": "被格式化编码的Uri",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "将要追加的Query参数值",
                    "type": "Object"
                },
                {
                    "name": "encode",
                    "description": "是否针对参数进行uri encode编码，默认是需编码的",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Expr",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Expr.js",
            "line": 96,
            "description": "将传入时间进行格式化专用函数",
            "itemtype": "method",
            "name": "formatDate",
            "params": [
                {
                    "name": "value",
                    "description": "时间数值"
                },
                {
                    "name": "pattern",
                    "description": "输出的时间格式",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Expr",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Expr.js",
            "line": 104,
            "description": "将当前时间格式化专用函数",
            "itemtype": "method",
            "name": "formatNow",
            "params": [
                {
                    "name": "pattern",
                    "description": "输出的时间格式",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Expr",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Field.js",
            "line": 8,
            "description": "二义性验证专用异步验证函数，返回值为true或false",
            "itemtype": "method",
            "name": "asyncTrue",
            "params": [
                {
                    "name": "config",
                    "description": "异步验证配置信息"
                },
                {
                    "name": "params",
                    "description": "传入参数信息"
                },
                {
                    "name": "callback",
                    "description": "异步验证完成后的回调对象，success为true回调，failure为false回调"
                },
                {
                    "name": "mock",
                    "description": "【Mock模式可用】"
                }
            ],
            "class": "Field",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Field.js",
            "line": 36,
            "description": "异步验证专用函数，返回值为Object",
            "itemtype": "method",
            "name": "asyncData",
            "params": [
                {
                    "name": "config",
                    "description": "异步验证配置信息"
                },
                {
                    "name": "params",
                    "description": "传入参数信息"
                },
                {
                    "name": "callback",
                    "description": "异步验证完成后的回调函数"
                },
                {
                    "name": "mock",
                    "description": "【Mock模式可用】"
                }
            ],
            "class": "Field",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Format.js",
            "line": 3,
            "description": "将传入值格式化成货币格式，该方法不带货币符号",
            "itemtype": "method",
            "name": "fmtCurrency",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Format",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Format.js",
            "line": 13,
            "description": "将传入值格式化成带百分比的字符串",
            "itemtype": "method",
            "name": "fmtPercent",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Format",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Global.js",
            "line": 4,
            "description": "检查环境变量中的Session值判断用户是否登录",
            "itemtype": "method",
            "name": "isLogged",
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Global",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Global.js",
            "line": 15,
            "description": "当前应用是否初始化完成，初始化完成后将应用配置放到应用Key中",
            "itemtype": "method",
            "name": "isInit",
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Global",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Global.js",
            "line": 26,
            "description": "当前用户的注销行为",
            "itemtype": "method",
            "name": "toLogout",
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Global",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Global.js",
            "line": 35,
            "description": "配合React Router执行登录控制，如果未登录则直接转发到登录界面\n* reference引用中必须包含$router用于路由转发",
            "itemtype": "method",
            "name": "isAuthorized",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                }
            ],
            "class": "Global",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Hoc.js",
            "line": 5,
            "description": "通用属性读取相关信息",
            "itemtype": "method",
            "name": "toProp",
            "params": [
                {
                    "name": "props",
                    "description": "传入的React属性"
                },
                {
                    "name": "keys",
                    "description": "需提取的所有keys属性名集"
                }
            ],
            "class": "Hoc",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Hoc.js",
            "line": 28,
            "description": "读取Tabular和Assist专用属性：`$t_`和`$a_`开头的属性值。",
            "itemtype": "method",
            "name": "toDatum",
            "params": [
                {
                    "name": "props",
                    "description": "传入的React属性"
                },
                {
                    "name": "keys",
                    "description": "需提取的所有keys属性名集"
                }
            ],
            "class": "Hoc",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Hoc.js",
            "line": 55,
            "description": "读取专用的带有`$_`前缀的属性值，主要用于从state状态中读取，Zero中所有的state中的键都是`$_`的格式。",
            "itemtype": "method",
            "name": "toEffect",
            "params": [
                {
                    "name": "state",
                    "description": "传入的React状态"
                }
            ],
            "class": "Hoc",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Hoc.js",
            "line": 69,
            "description": "读取组件的全称，和Cab.json中的namespace进行配合读取当前组件的全名",
            "itemtype": "method",
            "name": "toFullName",
            "params": [
                {
                    "name": "Component",
                    "description": "被封装的组件"
                },
                {
                    "name": "Cab",
                    "description": "链接资源文件",
                    "type": "JSON"
                },
                {
                    "name": "Name",
                    "description": "当前组件的名称（用于日志调试）",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Hoc",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Hoc.js",
            "line": 85,
            "description": "从Uri中读取Query Parameter查询参数",
            "itemtype": "method",
            "name": "toQueryParameter",
            "params": [
                {
                    "name": "name",
                    "description": "待读取的参数名",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Hoc",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Hoc.js",
            "line": 97,
            "description": "PageList组件专用继承方法\n* fnShow:对话框弹出窗口\n* fnHide:对话框关闭窗口\n* fnOut:Redux专用写函数\n* $dialog:对应Hoc中的_window，对话框参数\n* $metadata:对应Hoc中的_pagelist, 页面专用元数据\n* $query:当前页面的查询条件信息",
            "itemtype": "method",
            "name": "toPageList",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "FormComponent",
                    "description": "是否包含传入组件",
                    "type": "JSX"
                }
            ],
            "return": {
                "description": "}"
            },
            "class": "Hoc",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Html.js",
            "line": 3,
            "description": "读取Html原生组件的只读状态（必须在Mount之后）",
            "itemtype": "method",
            "name": "htmlReadOnly",
            "params": [
                {
                    "name": "id",
                    "description": "Html组件的ID"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Html",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Html.js",
            "line": 15,
            "description": "读取Html原生组件的禁用状态（必须在Mount之后）",
            "itemtype": "method",
            "name": "htmlDisabled",
            "params": [
                {
                    "name": "id",
                    "description": "Html组件的ID"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Html",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Html.js",
            "line": 45,
            "description": "聚焦输入组件时的错误验证（必须在Mount之后）",
            "itemtype": "method",
            "name": "htmlErrorFocus",
            "params": [
                {
                    "name": "item",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "Html",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Html.js",
            "line": 54,
            "description": "焦点移除时候的错误验证（必须在Mount之后）",
            "itemtype": "method",
            "name": "htmlErrorBlur",
            "params": [
                {
                    "name": "item",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "Html",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Icon.js",
            "line": 4,
            "description": "针对图标进行处理，类型包含icon和image两种\n* 如果type以`img:`开头，则使用`<img/>`标签\n* 其他情况则使用Ant Design中的`<Icon/>`处理",
            "itemtype": "method",
            "name": "uiIcon",
            "params": [
                {
                    "name": "type",
                    "description": "传入的字符串值",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Icon",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Jsx.js",
            "line": 9,
            "description": "验证规则属性\nmessage：校验文件\ntype: 可选（内建类型）\nrequired：是否必填\nlen:字段长度\nmin:最小长度\nmax:最大长度\nenum: 枚举类型\npattern:正则表达式校验\ntransform:校验前转换字段值\nvalidator: 自定义校验",
            "itemtype": "method",
            "name": "_uiDisplay",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "row",
                    "description": "显示行数据"
                }
            ],
            "class": "Jsx",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Jsx.js",
            "line": 44,
            "description": "Jsx单字段的Render处理",
            "itemtype": "method",
            "name": "jsxField",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "item",
                    "description": "Form中的Item配置信息"
                },
                {
                    "name": "render",
                    "description": "专用render函数"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Jsx",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Jsx.js",
            "line": 68,
            "description": "Jsx单行字段的Render处理",
            "itemtype": "method",
            "name": "jsxFieldRow",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "item",
                    "description": ""
                },
                {
                    "name": "render",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Jsx",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Jsx.js",
            "line": 88,
            "description": "针对Form进行分行渲染专用方法，可按照Grid的布局进行渲染",
            "itemtype": "method",
            "name": "uiFieldForm",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "renders",
                    "description": "每个字段不同的render方法"
                },
                {
                    "name": "column",
                    "description": "当前Form的列数量"
                },
                {
                    "name": "values",
                    "description": "Form的初始化值"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Jsx",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Log.js",
            "line": 17,
            "description": "【开发模式】可重用控件组件日志打印",
            "itemtype": "method",
            "name": "control",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "Name",
                    "description": "当前控件名称"
                }
            ],
            "class": "Log",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Log.js",
            "line": 30,
            "description": "【开发模式】页面组件日志打印",
            "itemtype": "method",
            "name": "page",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "Name",
                    "description": "当前控件名称"
                }
            ],
            "class": "Log",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Log.js",
            "line": 43,
            "description": "【开发模式】纯函数组件日志打印",
            "itemtype": "method",
            "name": "stateless",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "Name",
                    "description": "当前控件名称"
                }
            ],
            "class": "Log",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Log.js",
            "line": 59,
            "description": "【开发模式】Layout组件日志打印",
            "itemtype": "method",
            "name": "container",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "Name",
                    "description": "当前控件名称"
                }
            ],
            "class": "Log",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Log.js",
            "line": 72,
            "description": "【开发模式】Page中的其他自定义组件日志打印",
            "itemtype": "method",
            "name": "component",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "Name",
                    "description": "当前控件名称"
                }
            ],
            "class": "Log",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Log.js",
            "line": 85,
            "description": "【开发模式】Form专用组件日志打印",
            "itemtype": "method",
            "name": "form",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "Name",
                    "description": "当前控件名称"
                }
            ],
            "class": "Log",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Log.js",
            "line": 98,
            "description": "【开发模式】过滤参数专用",
            "itemtype": "method",
            "name": "filters",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "input",
                    "description": "输入的Query参数"
                },
                {
                    "name": "query",
                    "description": "Prop属性中的Query参数"
                },
                {
                    "name": "filters",
                    "description": "最终搜索用的Query参数"
                },
                {
                    "name": "cond",
                    "description": "搜索条件"
                }
            ],
            "class": "Log",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Log.js",
            "line": 120,
            "description": "【开发模式】签名专用函数",
            "itemtype": "method",
            "name": "sign",
            "params": [
                {
                    "name": "uri",
                    "description": "请求的Uri地址"
                },
                {
                    "name": "method",
                    "description": "请求的Http方法"
                },
                {
                    "name": "parameters",
                    "description": "请求的参数信息"
                },
                {
                    "name": "seed",
                    "description": "签名种子值"
                },
                {
                    "name": "sig",
                    "description": "签名最终结果"
                },
                {
                    "name": "secret",
                    "description": "签名的secret"
                }
            ],
            "class": "Log",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Log.js",
            "line": 143,
            "description": "【开发模式】打印请求数据",
            "itemtype": "method",
            "name": "request",
            "params": [
                {
                    "name": "uri",
                    "description": "请求的Uri地址"
                },
                {
                    "name": "method",
                    "description": "请求的Http方法"
                },
                {
                    "name": "parameters",
                    "description": "请求的参数信息"
                },
                {
                    "name": "token",
                    "description": "当前请求的token"
                }
            ],
            "class": "Log",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Log.js",
            "line": 161,
            "description": "【开发模式】打印响应信息",
            "itemtype": "method",
            "name": "response",
            "params": [
                {
                    "name": "err",
                    "description": "Ajax的错误对象"
                },
                {
                    "name": "res",
                    "description": "Ajax的正确响应"
                },
                {
                    "name": "method",
                    "description": "Http方法"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Log",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Log.js",
            "line": 180,
            "description": "直接打印错误信息（红色文字打印）",
            "itemtype": "method",
            "name": "error",
            "params": [
                {
                    "name": "error",
                    "description": ""
                }
            ],
            "class": "Log",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Log.js",
            "line": 192,
            "description": "【开发模式，并且开启Mock】打印Mock数据",
            "itemtype": "method",
            "name": "mock",
            "params": [
                {
                    "name": "request",
                    "description": "请求数据",
                    "type": "Request"
                },
                {
                    "name": "response",
                    "description": "响应数据",
                    "type": "Response"
                },
                {
                    "name": "url",
                    "description": "请求的url",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Log",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Log.js",
            "line": 214,
            "description": "【开发模式】直接打印数据",
            "itemtype": "method",
            "name": "debug",
            "params": [
                {
                    "name": "object",
                    "description": ""
                }
            ],
            "class": "Log",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Normalize.js",
            "line": 82,
            "description": "处理当前Form中的input控件专用信息",
            "itemtype": "method",
            "name": "extractForm",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Normalize",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Normalize.js",
            "line": 102,
            "description": "处理当前Form中的button或操作按钮配置信息",
            "itemtype": "method",
            "name": "extractOp",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                }
            ],
            "return": {
                "description": "",
                "type": "Any"
            },
            "class": "Normalize",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Normalize.js",
            "line": 115,
            "description": "处理type = hidden类型的配置信息",
            "itemtype": "method",
            "name": "extractHidden",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                }
            ],
            "return": {
                "description": "}"
            },
            "class": "Normalize",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Op.js",
            "line": 9,
            "description": "【高阶函数：三阶】提交专用三阶生成函数",
            "itemtype": "method",
            "name": "onSubmit",
            "params": [
                {
                    "name": "execFun",
                    "description": "二阶执行函数"
                },
                {
                    "name": "effectKey",
                    "description": "效果key"
                }
            ],
            "return": {
                "description": "",
                "type": "Function(*=): Function"
            },
            "class": "Op",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Op.js",
            "line": 42,
            "description": "【高阶函数：三阶】用于显示对话框",
            "itemtype": "method",
            "name": "onShow",
            "params": [
                {
                    "name": "execFun",
                    "description": "二阶执行函数"
                },
                {
                    "name": "effectKey",
                    "description": "效果key"
                }
            ],
            "return": {
                "description": "",
                "type": "Function(*=): Function"
            },
            "class": "Op",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Op.js",
            "line": 58,
            "description": "【高阶函数：三阶】用于隐藏对话框",
            "itemtype": "method",
            "name": "onHide",
            "params": [
                {
                    "name": "execFun",
                    "description": "二阶执行函数"
                },
                {
                    "name": "effectKey",
                    "description": "效果key"
                }
            ],
            "return": {
                "description": "",
                "type": "Function(*=): Function"
            },
            "class": "Op",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Op.js",
            "line": 74,
            "description": "【高阶函数：二阶】搜索专用函数",
            "itemtype": "method",
            "name": "onSearch",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "Op",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Op.js",
            "line": 92,
            "description": "【高阶函数：二阶】重置搜索条件函数，用于高级搜索专用",
            "itemtype": "method",
            "name": "onResetFilter",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "Op",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Op.js",
            "line": 109,
            "description": "componentDidUpdate中的List专用生命周期函数",
            "itemtype": "method",
            "name": "cycleUpdatePageList",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "key",
                    "description": "数据对应的props中的键值，默认使用`$list`；"
                },
                {
                    "name": "prevProps",
                    "description": "之前的属性信息"
                }
            ],
            "class": "Op",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Op.js",
            "line": 129,
            "description": "componentDidUnmount生命的Form专用函数",
            "itemtype": "method",
            "name": "cycleDestoryForm",
            "params": [
                {
                    "name": "props",
                    "description": "当前属性"
                },
                {
                    "name": "prevProps",
                    "description": "之前属性"
                }
            ],
            "class": "Op",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Op.js",
            "line": 159,
            "description": "componentDidUpdate的Form组件生命周期专用函数",
            "itemtype": "method",
            "name": "cycleUpdateForm",
            "params": [
                {
                    "name": "props",
                    "description": "当前属性"
                },
                {
                    "name": "prevProps",
                    "description": "之前属性"
                }
            ],
            "class": "Op",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Op.js",
            "line": 179,
            "description": "【高阶函数：二阶】高级搜索专用函数调用，用于分页列表中的分页、过滤、排序同时处理的函数，和Table组件的onChange配合使用",
            "itemtype": "method",
            "name": "onAdvanced",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "Op",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Op.js",
            "line": 205,
            "description": "窗口onOk连接在函数，连接Html元素并设置onOk的触发器",
            "itemtype": "method",
            "name": "connectButton",
            "params": [
                {
                    "name": "dialog",
                    "description": "传入的dialog窗口配置"
                }
            ],
            "class": "Op",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Op.js",
            "line": 227,
            "description": "顶部工具栏专用连接函数，连接Html元素并设置不同button函数",
            "itemtype": "method",
            "name": "connectTopbar",
            "params": [
                {
                    "name": "topbar",
                    "description": "顶部工具栏的工具配置"
                },
                {
                    "name": "key",
                    "description": "待连接的配置键值"
                }
            ],
            "class": "Op",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Option.js",
            "line": 1,
            "description": "处理Form中的Item的options选项构造配置信息",
            "itemtype": "method",
            "name": "optionFormItem",
            "params": [
                {
                    "name": "item",
                    "description": "配置数据"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Option",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Param.js",
            "line": 55,
            "description": "针对Ajax的专用参数解析器，这种Ajax参数解析一般用于异步验证、交互过程中的异步请求处理",
            "itemtype": "method",
            "name": "parseAjax",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "parameters",
                    "description": "传入的参数值信息"
                }
            ],
            "class": "Param",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Param.js",
            "line": 92,
            "description": "针对Query的专用参数解析器",
            "itemtype": "method",
            "name": "parseQuery",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "$query",
                    "description": "查询参数相关信息"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Param",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Prop.js",
            "line": 4,
            "description": "资源文件数据读取方法",
            "itemtype": "method",
            "name": "fromHoc",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "key",
                    "description": "读取对应属性名",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Null"
            },
            "class": "Prop",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Prop.js",
            "line": 16,
            "description": "从路由参数中读取数据专用",
            "itemtype": "method",
            "name": "fromRouter",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "key",
                    "description": "读取对应属性名",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Null"
            },
            "class": "Prop",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Prop.js",
            "line": 28,
            "description": "从reference的props中读取`key`对应的值，一般用于读取Tabular/Assist",
            "itemtype": "method",
            "name": "onDatum",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Prop",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Prop.js",
            "line": 44,
            "description": "Ant Design中的Form清空专用方法",
            "itemtype": "method",
            "name": "formClear",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "data",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Prop",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Prop.js",
            "line": 63,
            "description": "Ant Design中的Form读取，将`$record`记录中的数据读取到`data`中；",
            "itemtype": "method",
            "name": "formRead",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "data",
                    "description": "被修改的数据引用"
                }
            ],
            "class": "Prop",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Prop.js",
            "line": 81,
            "description": "Ant Design中的Form的表单重置函数",
            "itemtype": "method",
            "name": "formReset",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "keys",
                    "description": "指定重置的字段值"
                }
            ],
            "class": "Prop",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Prop.js",
            "line": 97,
            "description": "Ant Design中的Form操作的二义性函数\n* `value`有值时直接设置`key`的表单值；\n* `value`为undefined时则直接读取Form中的`key`对应的值",
            "itemtype": "method",
            "name": "formHit",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "key",
                    "description": "字段名"
                },
                {
                    "name": "value",
                    "description": "字段值"
                }
            ],
            "return": {
                "description": "",
                "type": "Any"
            },
            "class": "Prop",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Prop.js",
            "line": 121,
            "description": "Ant Design中的Form表单执行值设置",
            "itemtype": "method",
            "name": "formHits",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "values",
                    "description": "设置Form表单中的字段值"
                }
            ],
            "class": "Prop",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Prop.js",
            "line": 135,
            "description": "从React Router中读取路由参数",
            "itemtype": "method",
            "name": "onRouting",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "key",
                    "description": "需要读取的参数键名"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Prop",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Random.js",
            "line": 5,
            "description": "生成固定长度的随机字符串",
            "itemtype": "method",
            "name": "randomString",
            "params": [
                {
                    "name": "length",
                    "description": "生成字符串的长度",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Random",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Random.js",
            "line": 21,
            "description": "随机生成UUID",
            "itemtype": "method",
            "name": "randomUUID",
            "class": "Random",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Redux.js",
            "line": 1,
            "description": "读取Tabular专用数据，读取所有数据，一般用于Rxjs",
            "itemtype": "method",
            "name": "rxDatum",
            "params": [
                {
                    "name": "data",
                    "description": "从响应数据中读取"
                }
            ],
            "class": "Redux",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Redux.js",
            "line": 16,
            "description": "读取Assist专用数据，指定某个key，一般用于Rxjs",
            "itemtype": "method",
            "name": "rxAssist",
            "params": [
                {
                    "name": "data",
                    "description": "从数据中转换"
                },
                {
                    "name": "key",
                    "description": ""
                }
            ],
            "class": "Redux",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Sign.js",
            "line": 75,
            "description": "读取Token信息",
            "itemtype": "method",
            "name": "token",
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Sorter",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Sign.js",
            "line": 87,
            "description": "数字签名函数",
            "itemtype": "method",
            "name": "signature",
            "params": [
                {
                    "name": "uri",
                    "description": "Ajax访问专用Uri",
                    "type": "String"
                },
                {
                    "name": "method",
                    "description": "Http方法"
                },
                {
                    "name": "params",
                    "description": "Http参数"
                }
            ],
            "class": "Sorter",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Sorter.js",
            "line": 23,
            "description": "顺序排序",
            "itemtype": "method",
            "name": "sorterAsc",
            "params": [
                {
                    "name": "left",
                    "description": "左值"
                },
                {
                    "name": "right",
                    "description": "右值"
                }
            ],
            "return": {
                "description": "",
                "type": "Number|*"
            },
            "class": "Sorter",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Sorter.js",
            "line": 31,
            "description": "逆序排序",
            "itemtype": "method",
            "name": "sorterDesc",
            "params": [
                {
                    "name": "left",
                    "description": "左值"
                },
                {
                    "name": "right",
                    "description": "右值"
                }
            ],
            "return": {
                "description": "",
                "type": "Number|*"
            },
            "class": "Sorter",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.State.js",
            "line": 3,
            "description": "将数据会写状态树，props中需要包含`fnOut`函数",
            "itemtype": "method",
            "name": "writeTree",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "state",
                    "description": "写入的状态数据"
                }
            ],
            "class": "State",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Store.js",
            "line": 38,
            "description": "存储应用程序配置",
            "itemtype": "method",
            "name": "storeApp",
            "params": [
                {
                    "name": "data",
                    "description": ""
                }
            ],
            "class": "Store",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Store.js",
            "line": 51,
            "description": "存储用户数据",
            "itemtype": "method",
            "name": "storeUser",
            "params": [
                {
                    "name": "data",
                    "description": ""
                }
            ],
            "class": "Store",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Store.js",
            "line": 69,
            "description": "SessionStorage存储数据",
            "itemtype": "method",
            "name": "Session.put",
            "params": [
                {
                    "name": "key",
                    "description": "存储键名",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "存储的键值"
                }
            ],
            "class": "Store",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Store.js",
            "line": 76,
            "description": "SessionStorage读取数据",
            "itemtype": "method",
            "name": "Session.get",
            "params": [
                {
                    "name": "key",
                    "description": "读取键名",
                    "type": "String"
                }
            ],
            "class": "Store",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Store.js",
            "line": 82,
            "description": "SessionStorage移除数据",
            "itemtype": "method",
            "name": "Session.remove",
            "params": [
                {
                    "name": "key",
                    "description": "移除键名",
                    "type": "String"
                }
            ],
            "class": "Store",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Store.js",
            "line": 88,
            "description": "SessionStorage清除",
            "itemtype": "method",
            "name": "Session.clear",
            "class": "Store",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Store.js",
            "line": 95,
            "description": "LocalStorage存储数据",
            "itemtype": "method",
            "name": "Storage.put",
            "params": [
                {
                    "name": "key",
                    "description": "存储键名",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "存储的键值"
                }
            ],
            "class": "Store",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Store.js",
            "line": 102,
            "description": "LocalStorage读取数据",
            "itemtype": "method",
            "name": "Storage.get",
            "params": [
                {
                    "name": "key",
                    "description": "读取键名",
                    "type": "String"
                }
            ],
            "class": "Store",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Store.js",
            "line": 108,
            "description": "LocalStorage移除数据",
            "itemtype": "method",
            "name": "Storage.remove",
            "params": [
                {
                    "name": "key",
                    "description": "移除键名",
                    "type": "String"
                }
            ],
            "class": "Store",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Store.js",
            "line": 114,
            "description": "LocalStorage清除",
            "itemtype": "method",
            "name": "Storage.clear",
            "class": "Store",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Type.js",
            "line": 6,
            "description": "在数组中查找唯一元素",
            "itemtype": "method",
            "name": "elementUnique",
            "params": [
                {
                    "name": "data",
                    "description": "查找的数组",
                    "type": "Array"
                },
                {
                    "name": "field",
                    "description": "字段",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "class": "Type",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Type.js",
            "line": 19,
            "description": "返回数组的第一个元素中的field字段值\n* field有值则返回对应的Object的字段值\n* field没有值则直接返回该元素",
            "itemtype": "method",
            "name": "elementFirst",
            "params": [
                {
                    "name": "data",
                    "description": "查找的数组",
                    "type": "Array"
                },
                {
                    "name": "field",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Type",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Type.js",
            "line": 41,
            "description": "按`filters`过滤查询Array对应的值",
            "itemtype": "method",
            "name": "elementFind",
            "params": [
                {
                    "name": "data",
                    "description": "查找的数组",
                    "type": "Array"
                },
                {
                    "name": "filters",
                    "description": "查找条件"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Type",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Type.js",
            "line": 63,
            "description": "遍历数组中的某个字段，并处理该字段对应的`field`的值",
            "itemtype": "method",
            "name": "itElement",
            "params": [
                {
                    "name": "data",
                    "description": "被遍历的数组",
                    "type": "Array"
                },
                {
                    "name": "field",
                    "description": "需要替换的字段",
                    "type": "String"
                },
                {
                    "name": "itemFun",
                    "description": "替换函数",
                    "type": "Function"
                }
            ],
            "class": "Type",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Type.js",
            "line": 80,
            "description": "遍历对象直接处理key = value",
            "itemtype": "method",
            "name": "itObject",
            "params": [
                {
                    "name": "data",
                    "description": "被遍历的对象"
                },
                {
                    "name": "executor",
                    "description": "处理函数",
                    "type": "Function"
                }
            ],
            "class": "Type",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Type.js",
            "line": 97,
            "description": "二维数组遍历专用",
            "itemtype": "method",
            "name": "itMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "被遍历的二维数组（矩阵）"
                },
                {
                    "name": "eachFun",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "返回原始的Matrix",
                "type": "Matrix"
            },
            "class": "Type",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Type.js",
            "line": 114,
            "description": "Array数组中的属性映射处理",
            "itemtype": "method",
            "name": "elementVertical",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "field",
                    "description": "需要映射的字段名"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Type",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Type.js",
            "line": 134,
            "description": "遍历专用函数，二维遍历",
            "itemtype": "method",
            "name": "itFull",
            "params": [
                {
                    "name": "data",
                    "description": "被遍历的数组",
                    "type": "Array"
                },
                {
                    "name": "items",
                    "description": "被遍历的对象",
                    "type": "Object"
                },
                {
                    "name": "fieldFun",
                    "description": "操作函数",
                    "type": "Function"
                }
            ],
            "class": "Type",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Type.js",
            "line": 161,
            "description": "不重复元素追加\n* 如果是对象则检查key属性是否重复\n* 如果不是对象则直接追加",
            "itemtype": "method",
            "name": "elementAdd",
            "params": [
                {
                    "name": "array",
                    "description": "被追加的数组",
                    "type": "Array"
                },
                {
                    "name": "element",
                    "description": "元素信息"
                }
            ],
            "class": "Type",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Type.js",
            "line": 184,
            "description": "左右值处理，如果存在则移除，如果不存在直接添加",
            "itemtype": "method",
            "name": "elementSwitch",
            "params": [
                {
                    "name": "array",
                    "description": "传入的数组",
                    "type": "Array"
                },
                {
                    "name": "element",
                    "description": "处理的元素信息"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Type",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Type.js",
            "line": 207,
            "description": "增强Unique，查找Tabuler/Assist专用",
            "itemtype": "method",
            "name": "elementUniqueDatum",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "key",
                    "description": "被命中的key"
                },
                {
                    "name": "field",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "class": "Type",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Type.js",
            "line": 220,
            "description": "增强Find，查找Tabular/Assist专用",
            "itemtype": "method",
            "name": "elementFindDatum",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "key",
                    "description": "被命中的key"
                },
                {
                    "name": "filters",
                    "description": "查询条件"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Type",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Type.js",
            "line": 230,
            "description": "增强First，查找Tabular/Assist专用",
            "itemtype": "method",
            "name": "elementFirstDatum",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "key",
                    "description": "被命中的key"
                },
                {
                    "name": "field",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Type",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Validator.js",
            "line": 91,
            "description": "挂载Ant Design中的验证规则，访问`optionConfig`以及处理对应的`rules`节点",
            "itemtype": "method",
            "name": "mountValidator",
            "params": [
                {
                    "name": "reference",
                    "description": "React对应组件引用",
                    "type": "ReactComponent"
                },
                {
                    "name": "item",
                    "description": ""
                }
            ],
            "class": "Validator",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Value.js",
            "line": 4,
            "description": "不重复追加值到`item`对象中（包含则不设置）",
            "itemtype": "method",
            "name": "valueAppend",
            "params": [
                {
                    "name": "item",
                    "description": "被设置的对象引用"
                },
                {
                    "name": "field",
                    "description": "设置的字段名"
                },
                {
                    "name": "value",
                    "description": "设置的字段值"
                }
            ],
            "class": "Value",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Value.js",
            "line": 16,
            "description": "直接转换数据成Moment对象，时间处理",
            "itemtype": "method",
            "name": "convertTime",
            "params": [
                {
                    "name": "value",
                    "description": "输入数据"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Value",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Value.js",
            "line": 35,
            "description": "连续乘法专用乘法计算",
            "itemtype": "method",
            "name": "mathMultiplication",
            "params": [
                {
                    "name": "seed",
                    "description": "第一操作数"
                },
                {
                    "name": "ops",
                    "description": "其他操作数"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Value",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Value.js",
            "line": 53,
            "description": "专用除法运算",
            "itemtype": "method",
            "name": "mathDivision",
            "params": [
                {
                    "name": "dividend",
                    "description": "被除数"
                },
                {
                    "name": "divisor",
                    "description": "除数"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Value",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Value.js",
            "line": 69,
            "description": "根据from和to计算中间的duration差值\n* years - y\n* monthds -M\n* weeks -w\n* days - d\n* hours - h\n* minutes - m\n* seconds - s\n* milliseconds - ms",
            "itemtype": "method",
            "name": "valueDuration",
            "params": [
                {
                    "name": "from",
                    "description": "开始时间"
                },
                {
                    "name": "to",
                    "description": "结束时间"
                },
                {
                    "name": "mode",
                    "description": "计算模式"
                }
            ],
            "class": "Value",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Value.js",
            "line": 93,
            "description": "根据开始时间计算结束时间",
            "itemtype": "method",
            "name": "valueEndTime",
            "params": [
                {
                    "name": "from",
                    "description": "开始时间"
                },
                {
                    "name": "duration",
                    "description": "时差"
                },
                {
                    "name": "mode",
                    "description": "计算模式"
                }
            ],
            "return": {
                "description": "",
                "type": "moment.Moment"
            },
            "class": "Value",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Value.js",
            "line": 110,
            "description": "根据结束时间计算开始时间",
            "itemtype": "method",
            "name": "valueStartTime",
            "params": [
                {
                    "name": "to",
                    "description": "结束时间"
                },
                {
                    "name": "duration",
                    "description": "时差"
                },
                {
                    "name": "mode",
                    "description": "计算模式"
                }
            ],
            "return": {
                "description": "",
                "type": "moment.Moment"
            },
            "class": "Value",
            "module": "Ux"
        },
        {
            "file": "src/ux/Ux.Value.js",
            "line": 127,
            "description": "针对JavaScript中的对象进行过滤",
            "itemtype": "method",
            "name": "valueFilter",
            "params": [
                {
                    "name": "data",
                    "description": "被过滤的数据对象"
                },
                {
                    "name": "keys",
                    "description": "保留的字段名集合"
                }
            ],
            "class": "Value",
            "module": "Ux"
        }
    ],
    "warnings": []
}